<?xml version="1.0" ?>
<!DOCTYPE TranscendenceExtension
[
	<!ENTITY BP_Screens					"0xD5125500">
	<!ENTITY itBoardingAdvertiser		"0xD5125501">
	
	<!ENTITY dsAbandonedStation			"0x0000A003">
	<!ENTITY dsAbandonedShip			"0x0000A017">
]>

<TranscendenceExtension UNID="&BP_Screens;" version="1.0">

    <ItemType UNID="&itBoardingAdvertiser;"
        name=       "Boarding Parties Advertiser"
        frequency=  "notrandom"
        modifiers=  "ScreenHook; TerminalService; CannotOrder; NotForSale;"
        >
        <Image imageID="&rsItems1;" imageX="0" imageY="288" imageWidth="96" imageHeight="96"/>
        <StaticData>
            <HookTitle>"Boarding Parties Screen Browser"</HookTitle>
            <HookSubtitle>"This will be the entry point for the commander screens but for now we can browse them all."</HookSubtitle>
            <ScreenData>'(bp_ScreenData 'Debug)</ScreenData>
        </StaticData>
    </ItemType>

<!-- Abandoned station looting screen -->

	<DockScreen UNID="&dsAbandonedStation;"
			name=				"=(objGetName gSource)"
			>

		<OnInit>
			(intBoardingOnInit "Default")
		</OnInit>
		
		<Panes>
			<Default
					desc=		"You are docked at the lifeless ruins of a destroyed station. Wrecked machinery and smoldering bodies litter the silent, cavernous bay.">

				<Actions>
					<Action name="Loot" key="L" default="1" >
						(block Nil
							(setq gPrevScreen "&dsAbandonedStation;")
							(scrShowScreen gScreen "&dsLoot;")
							)
					</Action>

					<Action name="Jettison" key="J">
						(block Nil
							(setq gPrevScreen "&dsAbandonedStation;")
							(scrShowScreen gScreen "&dsJettison;")
							)
					</Action>

					<Action name="Undock" cancel="1" key="U">
						<Exit/>
					</Action>

				</Actions>

			</Default>
		</Panes>

	</DockScreen>

	<!-- Abandoned ship looting screen -->
	
	<DockScreen UNID="&dsAbandonedShip;"
			name=				"=(objGetName gSource)"
			>

		<OnInit>
			(intBoardingOnInit "Default")
		</OnInit>

		<Panes>
			<Default
					desc=		"You are docked with the wreck of a ship.">

				<Actions>
					<Action name="Loot" key="L" default="1" >
						(block Nil
							(setq gPrevScreen "&dsAbandonedShip;")
							(scrShowScreen gScreen "&dsLoot;")
							)
					</Action>

					<Action name="Jettison" key="J">
						(block Nil
							(setq gPrevScreen "&dsAbandonedShip;")
							(scrShowScreen gScreen "&dsJettison;")
							)
					</Action>

					<Action name="Undock" cancel="1" key="U">
						<Exit/>
					</Action>

				</Actions>

			</Default>
		</Panes>

	</DockScreen>

<Globals>
	(setq bp_ScreenData (lambda (screen) (block Nil
		(switch
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;						Debug screen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen is used for debugging and should have access to all other screens.
			(eq screen "Debug")
				(list
					'screenName     "We're debugging, so where do you want to go?"
					'paneDesc       "Welcome to the boarding parties back door!"
					'screenType     "CustomPicker"
					'hideBack       True
					'initFunc		'(bp_InitializePlayerData)
					'customPicker   (list
						;;;; Screen Browser
						(list
							'title      "Initial screen"
							'subtitle   "The intended initial screen"
							'paneDesc   '("\n\nWhen a combat is about to begin, this screen should be displayed." '+)
							'actions    (list
								(list
									'name       '("View the Initial Screen" 'I)
									'runFunc    '(bp_ScreenData "Warning")
								))
						)
						(list
							'title      "Tactics screen"
							'subtitle   "Choose your destiny!"
							'paneDesc   '("\n\nThe player must decide the best course of action." '+)
							'actions    (list
								(list
									'name       '("View the Tactics Screen" 'T)
									'runFunc    '(bp_ScreenData "TacticMain")
								))
						)
						(list
							'title      "Troop select screen"
							'subtitle   "Send in the bots!"
							'paneDesc   '("\n\nThe best way to make friends is to kill their enemies." '+)
							'actions    (list
								(list
									'name       '("View the troop Select screen" 'S)
									'runFunc    '(bp_ScreenData "TroopSelect")
								))
						)
						(list
							'title      "Battle screen"
							'subtitle   "In space, no one can hear them scream!"
							'paneDesc   '("\n\nWatch your bots in action." '+)
							'actions    (list
								(list
									'name       '("View the Battle screen" 'B)
									'runFunc    '(bp_ScreenData "BattleInit")
								))
						)
						(list
							'title      "Commander screen"
							'subtitle   "Finally, some personal screen time!"
							'paneDesc   '("\n\nTaking the fight to a personal level." '+)
							'actions    (list
								(list
									'name       '("View the Commander screen" 'B)
									'runFunc    '(bp_ScreenData "CommanderMain")
								))
						)
						)
					)
					
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;						Initial screen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen is the entrance to the battle, warning the player that there is combat 
			(eq screen "Warning")
				(list
					'screenName     "WARNING WARNING WARNING"
					'paneDesc       "Sensors indicate hostiles are still active!"
					'screenType     "Canvas"
					'hideBack       True
					'hideExit       Nil
					
					;; hopefully some nice shiny pic will replace this ghastly rectangle monster
					
					;; draw some pretty pics 
					'canvasFunc	'(block Nil
						(cnvDrawrect 0 0 600 400 '(8 8 8))
						(cnvDrawRect 100 100 400 200 '(255 0 0))
						(cnvDrawText 300 200 "Warning, Enemies detected!" 'subtitle '(255 255 255) 'center)
						)
						
					;; set up all our data for the enemy
					;; mark that combat is init-ed 
					'initFunc	'(block Nil
						;; We have found enemy resistance so load up some data
						;; find the player's C3I skill and perhaps some new ship
						;; device to scan the target station/wreck for more accurate info
						(bp_InitializePlayerData)  ;; this should be moved elsewhere so it only runs once
						(bp_InitializeBattle)
						(bp_InitializeEnemy)
						)
					'actions	(list
						(list
							'name       '("Begin preparations" 'B)
							'runFunc    '(bp_ScreenData "TacticMain")
							)
						(list
							'name       '("Perform intensive scan" 'P)
							'runFunc    '(bp_ScreenData "Scan")			;; TODO: this screen does not yet exist!
							'hideFunc	'(not (objGetItems gPlayerShip "*I+BattleScan"))	;; TODO: no item yet exists for this
							)
						)
					)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;					
;;						TACTIC SCREENS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen will display the tactics available to the player
			(eq screen "TacticMain")
				(list
					'screenName     "Choose your battle tactic wisely!"
					'paneDesc       "The available options are dependent on the commander's tactic skill."
					'screenType     "CustomPicker"
					'hideBack       Nil
					'hideExit       Nil
					'customPicker   (list
						;;;; Tactics Browser
						(list
							'title      "Attack"
							'subtitle   "Send in the troops."
							'paneDesc   '("\nThe most basic strategy ever: shoot." '+)
							'actions	(list
								(list
									'name       '("Select" 'S)
									'runFunc    '(block Nil
										;; remember which tactic we used for use later
										(dsf_SetScreenState "Tactic" 'attack)
										(bp_ScreenData "TroopSelect")
										)
									)
								)
							)
						(list
							'title      "Retreat"
							'subtitle   "Pull the troops out."
							'paneDesc   '("\nThe second most basic strategy ever: run away." '+)
							'actions	(list
								(list
									'name       '("Select" 'S)
									'runFunc    '(block Nil
										(dsf_SetScreenState "Tactic" 'retreat)
										(objSetData gSource "tacDefense" 10)
										(objSetData gSource "tacStrength" -3)
										(bp_ScreenData "TroopSelect")
										)
									)
								)
							)
						(list
							'title      "Psionic Attack"
							'subtitle   "Use those egg heads to their full potential."
							'paneDesc   '("\nWhy kill your enemies when you can enslave them?" '+)
							'hideList   '(and (leq (dsf_GetData "Tactics") 4)
								(leq (dsf_GetData "Psionics") 1))
							'actions	(list
								(list
									'name       '("Select" 'S)
									'runFunc    '(block Nil
										(dsf_SetScreenState "Tactic" 'psionic)
										(objSetdata gsource "tacPsionic" 5)
										(objSetData gSource "tacDefense" 10)
										(objSetData gSource "tacStrength" -2)
										(bp_ScreenData "TroopSelect")
										)
									)
								)
							)
							
						) ;; tactics custom picker end
					) ;; tacticMain end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;						TROOP SCREENS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen allows the player to choose the troops that will be sent into combat
			(eq screen "TroopSelect")
				(list
					'screenName     "Troop select"
					'paneDesc       "Select which troop units you will commit to battle."
					'screenType     "CustomPicker"
					'itemFilter     "* +TroopUnit;"
					'noSave         True
					'hideBack       Nil
					'hideExit       True
					'actions            (list
						(list
							'name       '("Select" 'S)
							'hideFunc	'(itmGetData (dsf_GetListEntryData 'troop) "Committed")
							'runFunc    '(block Nil
								(dsf_SetScreenState 'troop (dsf_GetListEntryData 'troop))
								(bp_ScreenData 'TroopCount)
								)
							)
						(list
							'name       '("De-Select" 'D)
							'hideFunc	'(eq (itmGetData (dsf_GetListEntryData 'troop) "Committed") Nil)
							'runFunc    '(block (troop)
								(setq troop (dsf_GetListEntryData 'troop))
								(objSetItemData gPlayerShip troop "Committed" Nil (itmGetCount troop))
								(bp_ScreenData 'TroopSelect)
								)
							)
						(list
							'name       '("Engage combat" 'E)
							'runFunc    '(bp_ScreenData 'preBattleSummary)
							)
						) ;; end of actions

					'customPicker	(block (displayList)
						(setq displayList (list))
						(objEnumItems gPlayerShip "* +TroopUnit;" troop (block Nil
							(lnkAppend displayList
								(list
									'title      (cat (itmGetName troop 8) (if (itmGetData troop "Committed") " - Committed" ""))
									'image		(itmGetImageDesc troop)
									'subtitle   (cat (itmGetStaticData troop "Desc")
										" | Strength: "(itmGetStaticData troop "Strength")" | Defense: "(itmGetStaticData troop "Defense")" | Health: "(itmGetStaticData troop "Health")
										" | C3I: "(itmGetStaticData troop "C3I")" | Stealth: "(itmGetStaticData troop "Stealth")" | Psionics: "(itmGetStaticData troop "Psionics")
										" | Hacker: "(itmGetStaticData troop "Hacker")" | Healer: "(itmGetStaticData troop "Healer")" | Demolitions: "(itmGetStaticData troop "Demolitions")
										" | Commando: "(itmGetStaticData troop "Commando")" | Commander: "(itmGetStaticData troop "Commander")
										)
									'troop		troop
									)
								)
							))
							displayList
						)
					)
			;; Select the number of troops to be sent in
			(eq screen "TroopCount")
				(list
					'screenName     "Troop select, count"
					'paneDesc       "Your commander skill limits the number of troops that you can command at one time."
					'paneType       "Counter"
					'hideBack       Nil
					'hideExit       True
					'noSave			True
					'initFunc	'(block (maxCount commanderMaxCount committed)
						(setq committed 0)
						(enum (objGetItems gPlayerShip "* +TroopUnit") thisItem
							(if (itmGetData thisItem "committed")
								(setq committed (add committed (itmGetCount thisItem)))
								)
							)
						(setq maxCount (itmGetCount (dsf_GetScreenState 'troop)))
						(setq commanderMaxCount (subtract (objGetData gSource "plyCommander") committed))
						(scrSetCounter gScreen (min maxCount commanderMaxCount))
						)
					'actions	(list
						(list
							'name       '("Commit to battle" 'C)
							'runFunc    '(block (troop cnt maxCount commanderMaxCount committed)
								(setq committed 0)
								(enum (objGetItems gPlayerShip "* +TroopUnit") thisItem
									(if (itmGetData thisItem "committed")
										(setq committed (add committed (itmGetCount thisItem)))
										)
									)
								(setq maxCount (itmGetCount (dsf_GetScreenState 'troop)))
								(setq commanderMaxCount (subtract (objGetData gSource "plyCommander") committed))
								(setq cnt (scrGetCounter gScreen))
								(switch
									(leq cnt 0)
										(block Nil
											(dsf_BuildPaneDesc "\nInvalid amount.")
											(bp_ScreenData 'TroopCount)
											)
									
									(gr cnt maxCount)
										(block Nil
											(dsf_BuildPaneDesc "\nYou do not have enough troops.")
											(bp_ScreenData 'TroopCount)
											)
									
									(gr cnt commanderMaxCount)
										(block Nil
											(dsf_BuildPaneDesc "\nYou cannot command that many troops.")
											(bp_ScreenData 'TroopCount)
											)
											
									(block nil
										(objSetItemData gPlayerShip (dsf_GetScreenState 'troop) "Committed" True cnt)
										(bp_ScreenData 'TroopSelect)
										)
									)
								)
							)
						)
					)
			;; This screen should show a summary of the stat subtotals 
			;; and provide an option to view all committed troops
			;; perhaps an option to link into the commander screens as well
			;; this is the last checkpoint before we begin te battle calcs.
			(eq screen "preBattleSummary")
				(list
					'screenName     "You are about to enter battle."
					'paneDesc       "Check your final stats before entering combat!"
					'screenType     "Canvas"
					'hideBack       Nil
					'hideExit       Nil
					'canvasFunc	'(block (committed cnt str def hp c3i stealth psi hacker healer demo commando plyCommitted)
						;; init some vars
						(setq cnt 0)
						(setq str 0)
						(setq def 0)
						(setq hp 0)
						(setq c3i 0)
						(setq stealth 0)
						(setq psi 0)
						(setq hacker 0)
						(setq healer 0)
						(setq demo 0)
						(setq commando 0)
						(setq plyCommitted (if (eq (objGetData gSource "plyCommitted") True) "Yes" "No"))
						
						;; build a list of our committed troops and total up their stats
						(setq committed (list))
						(enum (objGetItems gPlayerShip "* +TroopUnit") thisItem
							(if (itmGetData thisItem "committed")
								(block Nil
									(lnkAppend committed thisItem)
									(setq cnt (add cnt (itmGetCount thisItem)))
									(setq str (add str (multiply cnt (itmGetStaticData thisItem "Strength"))))
									(setq def (add def (multiply cnt (itmGetStaticData thisItem "Defense"))))
									(setq HP (add HP (multiply cnt (itmGetStaticData thisItem "Health"))))
									(setq C3I (add C3I (multiply cnt (itmGetStaticData thisItem "C3I"))))
									(setq Stealth (add stealth (multiply cnt (itmGetStaticData thisItem "Stealth"))))
									(setq Psi (add psi (multiply cnt (itmGetStaticData thisItem "Psionics"))))
									(setq hacker (add hacker (multiply cnt (itmGetStaticData thisItem "Hacker"))))
									(setq Healer (add Healer (multiply cnt (itmGetStaticData thisItem "Healer"))))
									(setq demo (add demo (multiply cnt (itmGetStaticData thisItem "Demolitions"))))
									(setq commando (add commando (multiply cnt (itmGetStaticData thisItem "Commando"))))
									)
								)
							)
						;; remember all these totals for use in the final combat calcs
						(dsf_SetScreenState "plyTroopCount" cnt)
						(dsf_SetScreenState "plyTroopStrength" str)
						(dsf_SetScreenState "plyTroopDefense" def)
						(dsf_SetScreenState "plyTroopHealth" HP)
						(dsf_SetScreenState "plyTroopC3I" c3i)
						(dsf_SetScreenState "plyTroopStealth" stealth)
						(dsf_SetScreenState "plyTroopPsionics" psi)
						(dsf_SetScreenState "plyTroophacker" hacker)
						(dsf_SetScreenState "plyTroopHealer" healer)
						(dsf_SetScreenState "plyTroopDemolitions" demo)
						(dsf_SetScreenState "plyTroopCommando" commando)

						;; now we finally do some canvas stuff to display where the troop totals are sitting
						;; TODO: convert all these cnvFuncs to dsf_Canvas funcs
						(cnvDrawRect 40 60 200 240 '(8 8 8))
						(cnvDrawText 50 25 (cat "Chosen Tactic: "(dsf_GetScreenState "tactic")) 'large '(255 255 255) 'left)
						(cnvDrawText 60 70 (cat "Total troops committed: "cnt) 'medium '(255 255 255) 'left)
						(cnvDrawText 60 90 (cat "Total troops strength: "str) 'medium '(255 255 255) 'left)
						(cnvDrawText 60 110 (cat "Total troops defense: "def) 'medium '(255 255 255) 'left)
						(cnvDrawText 60 130 (cat "Total troops health: "hp) 'medium '(255 255 255) 'left)
						(cnvDrawText 60 150 (cat "Total troops C3I: "c3i) 'medium '(255 255 255) 'left)
						(cnvDrawText 60 170 (cat "Total troops Stealth: "stealth) 'medium '(255 255 255) 'left)
						(cnvDrawText 60 190 (cat "Total troops Psionic: "psi) 'medium '(255 255 255) 'left)
						(cnvDrawText 60 210 (cat "Total troops Hacker: "hacker) 'medium '(255 255 255) 'left)
						(cnvDrawText 60 230 (cat "Total troops Healer: "healer) 'medium '(255 255 255) 'left)
						(cnvDrawText 60 250 (cat "Total troops Demolition: "demo) 'medium '(255 255 255) 'left)
						(cnvDrawText 60 270 (cat "Total troops Commando: "commando) 'medium '(255 255 255) 'left)
						
						;; if the player commander is going to enter combat, include that data as well
						(if (eq plyCommitted "Yes")
							(block Nil
								(cnvDrawRect 380 60 200 240 '(8 8 8))
								(cnvDrawText 380 25 (cat "Commander committed - "plyCommitted) 'large '(0 255 0) 'left)
								(cnvDrawText 400 70 (cat "Commander strength: "(objGetData gSource "plyStrength")) 'medium '(255 255 255) 'left)
								(cnvDrawText 400 90 (cat "Commander defense: "(objGetData gSource "plyDefense")) 'medium '(255 255 255) 'left)
								(cnvDrawText 400 110 (cat "Commander health: "(objGetData gSource "plyHP")) 'medium '(255 255 255) 'left)
								(cnvDrawText 400 130 (cat "Commander C3I: "(objGetData gSource "plyC3I")) 'medium '(255 255 255) 'left)
								(cnvDrawText 400 150 (cat "Commander stealth: "(objGetData gSource "plyStealth")) 'medium '(255 255 255) 'left)
								(cnvDrawText 400 170 (cat "Commander psionics: "(objGetData gSource "plyPsionic")) 'medium '(255 255 255) 'left)
								(cnvDrawText 400 190 (cat "Commander hacker: "(objGetData gSource "plyHacker")) 'medium '(255 255 255) 'left)
								(cnvDrawText 400 210 (cat "Commander healer: "(objGetData gSource "plyHealer")) 'medium '(255 255 255) 'left)
								(cnvDrawText 400 230 (cat "Commander demolition: "(objGetData gSource "plyDemolition")) 'medium '(255 255 255) 'left)
								(cnvDrawText 400 250 (cat "Commander commando: "(objGetData gSource "plyCommando")) 'medium '(255 255 255) 'left)
								)
							;; the player commander isn't committed so inform the player how to engage
							(block Nil
								(cnvDrawRect 290 80 260 80 '(8 8 8))
								(cnvDrawText 420 25 (cat "Commander committed - "plyCommitted) 'large '(255 0 0) 'center)
								(cnvDrawText 420 90 "If you would like to personally join"'medium '(255 255 255) 'center)
								(cnvDrawText 420 110 "in the combat, check your status to"'medium '(255 255 255) 'center)
								(cnvDrawText 420 130 "ensure that you are properly equipped."'medium '(255 255 255) 'center)
								)
							)
						)
					'actions	(list
						(list
							'name       '("Engage the enemy" 'E)
							'runFunc    '(bp_ScreenData 'BattleInit)
							)
						(list
							'name       '("Commander status" 'C)
							'runFunc    '(bp_ScreenData 'CommanderMain)
							)
						)
					)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					BATTLE SCREENS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen initiates the combat
			(eq screen "BattleInit")
				(list
					'screenName     (cat (objGetName gSource) "'s cargobay.")
					'paneDesc       "The battle rages!"
					'screenType     "Canvas"
					'hideBack       Nil
					'hideExit       Nil
					'canvasFunc		'(block (enemyTroopcount enemyTotStr enemyTotDef enemyTotHP enemyTotC3I enemyTotStealth
						enemyTotPsi enemyTotHack enemyTotHeal enemyTotDemo enemyTotComo plyTroopcount plyTroopStr plyTroopDef
						plyTroopHP plyTroopC3I plyTroopStealth plyTroopPsi plyTroopHack plyTroopHeal plyTroopDemo plyTroopComo
						plyTactic newEnemyTotHP NewplyTroopHP)
						
						;; first, we must collect all the necessary data, and it is a lot
						;; start with enemy data
						(setq enemyTroopcount (objGetdata gSource "enemytroopCount"))
						(setq enemyTotStr (multiply enemyTroopCount (objGetData gSource "Strength")))
						(setq enemyTotDef (multiply enemyTroopCount (objGetData gSource "Defense")))
						(setq enemyTotHP (multiply enemyTroopCount (objGetData gSource "HP")))
						(setq enemyTotC3I (multiply enemyTroopCount (objGetData gSource "c3i")))
						(setq enemyTotStealth (multiply enemyTroopCount (objGetData gSource "Stealth")))
						(setq enemyTotPsi (multiply enemyTroopCount (objGetData gSource "Psionic")))
						(setq enemyTotHack (multiply enemyTroopCount (objGetData gSource "Hacker")))
						(setq enemyTotHeal (multiply enemyTroopCount (objGetData gSource "Healer")))
						(setq enemyTotDemo (multiply enemyTroopCount (objGetData gSource "Demolition")))
						(setq enemyTotComo (multiply enemyTroopCount (objGetData gSource "commando")))
						
						;; now the player's troop totals
						(setq plyTactic (dsf_GetScreenState "Tactic"))
						(setq plyTroopcount (dsf_GetScreenState "plyTroopCount"))
						(setq plyTroopStr (dsf_GetScreenState "plyTroopStrength"))
						(setq plyTroopDef (dsf_GetScreenState "plyTroopDefense"))
						(setq plyTroopHP (dsf_GetScreenState "plyTroopHealth"))
						(setq plyTroopC3I (dsf_GetScreenState "plyTroopC3I"))
						(setq plyTroopStealth (dsf_GetScreenState "plyTroopStealth"))
						(setq plyTroopPsi (dsf_GetScreenState "plyTroopPsionics"))
						(setq plyTroopHack (dsf_GetScreenState "plyTroophacker"))
						(setq plyTroopHeal (dsf_GetScreenState "plyTroopHealer"))
						(setq plyTroopDemo (dsf_GetScreenState "plyTroopDemolitions"))
						(setq plyTroopComo (dsf_GetScreenState "plyTroopCommando"))
						
						;; check if the player-commander is committed and increment the totals to account for them
						(if (eq (objGetData gSource "plyCommitted") True)
							(block nil
								(setq plyTroopStr (add plyTroopStr (objGetData gSource "plyStrength")))
								(setq plyTroopDef (add plyTroopDef (objGetData gSource "plyDefense")))
								(setq plyTroopHP (add plyTroopHP (objGetData gSource "plyHP")))
								(setq plyTroopC3I (add plyTroopC3I (objGetData gSource "plyC3I")))
								(setq plyTroopStealth (add plyTroopStealth (objGetData gSource "plystealth")))
								(setq plyTroopPsi (add plyTroopPsi (objGetData gSource "plyPsionic")))
								(setq plyTroopHack (add plyTroopHack (objgetData gSource "plyHacker")))
								(setq plyTroopHeal (add plyTroopHeal (objgetData gSource "plyHealer")))
								(setq plyTroopDemo (add plyTroopDemo (objGetData gSource "plyDemolition")))
								(setq plyTroopComo (add plyTroopComo (objGetData gSource "plycommando")))
								)
							)

						;; apply the data from the chosen tactic
						(setq plyTroopStr (add plyTroopStr (multiply plyTroopCount (objGetData gSource "tacStrength"))))
						(setq plyTroopDef (add plyTroopDef (multiply plyTroopCount (objGetData gSource "tacDefense"))))
						(setq plyTroopHP (add plyTroopHP (multiply plyTroopCount (objGetData gSource "tacHP"))))
						(setq plyTroopC3I (add plyTroopC3I (multiply plyTroopCount (objGetData gSource "tacC3I"))))
						(setq plyTroopStealth (add plyTroopStealth (multiply plyTroopCount (objGetData gSource "tacstealth"))))
						(setq plyTroopPsi (add plyTroopPsi (multiply plyTroopCount (objGetData gSource "tacPsionic"))))
						(setq plyTroopHack (add plyTroopHack (multiply plyTroopCount (objgetData gSource "tacHacker"))))
						(setq plyTroopHeal (add plyTroopHeal (multiply plyTroopCount (objgetData gSource "tacHealer"))))
						(setq plyTroopDemo (add plyTroopDemo (multiply plyTroopCount (objGetData gSource "tacDemolition"))))
						(setq plyTroopComo (add plyTroopComo (multiply plyTroopCount (objGetData gSource "tacCommando"))))

						;; to avoid nasty errors we add 1 to all stats that are zero
						(if (eq 0 enemyTroopcount) (setq enemyTroopcount 1))
						(if (eq 0 enemyTotStr) (setq enemyTotStr 1))
						(if (eq 0 enemyTotDef) (setq enemyTotDef 1)) 
						(if (eq 0 enemyTotHP) (setq enemyTotHP 1))
						(if (eq 0 enemyTotC3I) (setq enemyTotC3I 1))
						(if (eq 0 enemyTotStealth) (setq enemyTotStealth 1))
						(if (eq 0 enemyTotPsi) (setq enemyTotPsi 1))
						(if (eq 0 enemyTotHack) (setq enemyTotHack 1))
						(if (eq 0 enemyTotHeal) (setq enemyTotHeal 1))
						(if (eq 0 enemyTotDemo) (setq enemyTotDemo 1))
						(if (eq 0 enemyTotComo) (setq enemyTotComo 1))
						(if (eq 0 plyTroopStr) (setq plyTroopStr 1))
						(if (eq 0 plyTroopDef) (setq plyTroopDef 1)) 
						(if (eq 0 plyTroopHP) (setq plyTroopHP 1))
						(if (eq 0 plyTroopC3I) (setq plyTroopC3I 1))
						(if (eq 0 plyTroopStealth) (setq plyTroopStealth 1))
						(if (eq 0 plyTroopPsi) (setq plyTroopPsi 1))
						(if (eq 0 plyTroopHack) (setq plyTroopHack 1))
						(if (eq 0 plyTroopHeal) (setq plyTroopHeal 1))
						(if (eq 0 plyTroopDemo) (setq plyTroopDemo 1))
						(if (eq 0 plyTroopComo) (setq plyTroopComo 1))

						;; display all the totals before comparisons are made
						(dsf_DrawText "Player / Enemy" nil nil 'Medium 200 60 '(255 255 255) 'center)
						(dsf_DrawText (cat "troop count: "plyTroopCount" / "enemyTroopcount) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "strength: "plyTroopStr" / "enemyTotStr) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "defense: "plyTroopDef" / "enemyTotDef) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "health: "plyTroopHP" / "enemyTotHp) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "C3I : "plyTroopC3I" / "enemyTotC3I) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "Stealth: "plyTroopStealth" / "enemyTotStealth) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "Psionics: "plyTroopPsi" / "enemyTotPsi) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "Hacker: "plyTroopHack" / "enemyTothack) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "Healer: "plyTroopHeal" / "enemyTotHeal) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "Demolitions: "plyTroopDemo" / "enemyTotDemo) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "Commando: "plyTroopComo" / "enemyTotcomo) nil 20 'Medium nil nil '(255 255 255) 'center)

						
			;; now we can compare all the stats and make modifications before finally dealing damage
			;; the order that the stats are compared is important for dependencies
			;; TODO: build these into helper functions to make it easier to read

						;; compare psionic stats and modify C3I, stealth and hacker skills
						(switch
							(geq (divide plyTroopPsi enemyTotPsi) 10)
								(block nil
									(setq plyTroopC3I (multiply plyTroopC3I 5))
									(setq plyTroopHack (multiply plyTroopHack 5))
									(setq plyTroopStealth (multiply plyTroopStealth 5))
									)
							(geq (divide plyTroopPsi enemyTotPsi) 5)
								(block nil
									(setq plyTroopC3I (multiply plyTroopC3I 3))
									(setq plyTroopHack (multiply plyTroopHack 3))
									(setq plyTroopStealth (multiply plyTroopStealth 3))
									)
							(geq (divide plyTroopPsi enemyTotPsi) 3)
								(block nil
									(setq plyTroopC3I (multiply plyTroopC3I 2))
									(setq plyTroopHack (multiply plyTroopHack 2))
									(setq plyTroopStealth (multiply plyTroopStealth 2))
									)
							(geq (divide plyTroopPsi enemyTotPsi) 2)
								(block nil
									(setq plyTroopC3I (divide (multiply plyTroopC3I 3) 2))
									(setq plyTroopHack (divide (multiply plyTroopHack 3) 2))
									(setq plyTroopStealth (divide (multiply plyTroopStealth 3) 2))
									)
							(gr plyTroopPsi enemyTotPsi)
								(block nil
									(setq plyTroopC3I (divide (multiply plyTroopC3I 5) 4))
									(setq plyTroopHack (divide (multiply plyTroopHack 5) 4))
									(setq plyTroopStealth (divide (multiply plyTroopStealth 5) 4))
									)
							(geq (divide enemyTotPsi plyTroopPsi) 2)
								(block nil
									(setq plyTroopC3I (divide (multiply plyTroopC3I 2) 3))
									(setq plyTroopHack (divide (multiply plyTroopHack 2) 3))
									(setq plyTroopStealth (divide (multiply plyTroopStealth 2) 3))
									)
							(geq (divide enemyTotPsi plyTroopPsi) 3)
								(block nil
									(setq plyTroopC3I (divide plyTroopC3I 2))
									(setq plyTroopHack (divide plyTroopHack 2))
									(setq plyTroopStealth (divide plyTroopStealth 2))
									)
							(geq (divide enemyTotPsi plyTroopPsi) 5)
								(block nil
									(setq plyTroopC3I (divide plyTroopC3I 3))
									(setq plyTroopHack (divide plyTroopHack 3))
									(setq plyTroopStealth (divide plyTroopStealth 3))
									)
							(geq (divide enemyTotPsi plyTroopPsi) 10)
								(block nil
									(setq plyTroopC3I (divide plyTroopC3I 5))
									(setq plyTroopHack (divide plyTroopHack 5))
									(setq plyTroopStealth (divide plyTroopStealth 5))
									)
							)

						;; compare hacker stats and modify C3I and Demolitions skills
						(switch
							(geq (divide plyTroopHack enemyTotHack) 10)
								(block Nil
									(setq plyTroopC3I (multiply plyTroopC3I 5))
									(setq plyTroopDemo (multiply plyTroopDemo 5))
									)
							(geq (divide plyTroopHack enemyTotHack) 5)
								(block Nil
									(setq plyTroopC3I (multiply plyTroopC3I 3))
									(setq plyTroopDemo (multiply plyTroopDemo 3))
									)
							(geq (divide plyTroopHack enemyTotHack) 3)
								(block Nil
									(setq plyTroopC3I (multiply plyTroopC3I 2))
									(setq plyTroopDemo (multiply plyTroopDemo 2))
									)
							(geq (divide plyTroopHack enemyTotHack) 2)
								(block Nil
									(setq plyTroopC3I (divide (multiply plyTroopC3I 3) 2))
									(setq plyTroopDemo (divide (multiply plyTroopDemo 3) 2))
									)
							(gr plyTroopHack enemyTotHack)
								(block Nil
									(setq plyTroopC3I (divide (multiply plyTroopC3I 5) 4))
									(setq plyTroopDemo (divide (multiply plyTroopDemo 5) 4))
									)
							(geq (divide enemyTotHack plyTroopHack) 2)
								(block Nil
									(setq plyTroopC3I (divide (multiply plyTroopC3I 2) 3))
									(setq plyTroopDemo (divide (multiply plyTroopDemo 2) 3))
									)
							(geq (divide enemyTotHack plyTroopHack) 3)
								(block Nil
									(setq plyTroopC3I (divide plyTroopC3I 2))
									(setq plyTroopDemo (divide plyTroopDemo 2))
									)
							(geq (divide enemyTotHack plyTroopHack) 5)
								(block Nil
									(setq plyTroopC3I (divide plyTroopC3I 3))
									(setq plyTroopDemo (divide plyTroopDemo 3))
									)
							(geq (divide enemyTotHack plyTroopHack) 10)
								(block Nil
									(setq plyTroopC3I (divide plyTroopC3I 5))
									(setq plyTroopDemo (divide plyTroopDemo 5))
									)
							)

						;; compare C3I stats and modify strength and defense
						(switch
							(geq (divide plyTroopC3I enemyTotC3I) 10)
								(block Nil
									(setq plyTroopStr (multiply plyTroopStr 5))
									(setq plyTroopDef (multiply plyTroopDef 5))
									(setq plyTroopComo (multiply plyTroopcomo 5))
									)
							(geq (divide plyTroopC3I enemyTotC3I) 5)
								(block Nil
									(setq plyTroopStr (multiply plyTroopStr 3))
									(setq plyTroopDef (multiply plyTroopDef 3))
									(setq plyTroopComo (multiply plyTroopcomo 3))
									)
							(geq (divide plyTroopC3I enemyTotC3I) 3)
								(block Nil
									(setq plyTroopStr (multiply plyTroopStr 2))
									(setq plyTroopDef (multiply plyTroopDef 2))
									(setq plyTroopComo (multiply plyTroopcomo 2))
									)
							(geq (divide plyTroopC3I enemyTotC3I) 2)
								(block Nil
									(setq plyTroopStr (divide (multiply plyTroopStr 3) 2))
									(setq plyTroopDef (divide (multiply plyTroopDef 3) 2))
									(setq plyTroopComo (divide (multiply plyTroopcomo 3) 2))
									)
							(gr plyTroopC3I enemyTotC3I)
								(block Nil
									(setq plyTroopStr (divide (multiply plyTroopStr 5) 4))
									(setq plyTroopDef (divide (multiply plyTroopDef 5) 4))
									(setq plyTroopComo (divide (multiply plyTroopcomo 5) 4))
									)
							(geq (divide enemyTotC3I plyTroopC3I) 2)
								(block Nil
									(setq plyTroopStr (divide (multiply plyTroopStr 2) 3))
									(setq plyTroopDef (divide (multiply plyTroopDef 2) 3))
									(setq plyTroopComo (divide (multiply plyTroopcomo 2) 3))
									)
							(geq (divide enemyTotC3I plyTroopC3I) 3)
								(block Nil
									(setq plyTroopStr (divide plyTroopStr 2))
									(setq plyTroopDef (divide plyTroopDef 2))
									(setq plyTroopComo (divide plyTroopcomo 2))
									)
							(geq (divide enemyTotC3I plyTroopC3I) 5)
								(block Nil
									(setq plyTroopStr (divide plyTroopStr 3))
									(setq plyTroopDef (divide plyTroopDef 3))
									(setq plyTroopComo (divide plyTroopcomo 3))
									)
							(geq (divide enemyTotC3I plyTroopC3I) 10)
								(block Nil
									(setq plyTroopStr (divide plyTroopStr 5))
									(setq plyTroopDef (divide plyTroopDef 5))
									(setq plyTroopComo (divide plyTroopcomo 5))
									)
							)

						;; compare commando stats and modify strength, defense and demolitions
						(switch
							(geq (divide plyTroopcomo enemyTotComo) 10)
								(block Nil
									(setq plyTroopStr (multiply plyTroopStr 5))
									(setq plyTroopDef (multiply plyTroopDef 5))
									(setq plyTroopDemo (multiply plyTroopDemo 5))
									)
							(geq (divide plyTroopcomo enemyTotComo) 5)
								(block Nil
									(setq plyTroopStr (multiply plyTroopStr 3))
									(setq plyTroopDef (multiply plyTroopDef 3))
									(setq plyTroopDemo (multiply plyTroopDemo 3))
									)
							(geq (divide plyTroopcomo enemyTotComo) 3)
								(block Nil
									(setq plyTroopStr (multiply plyTroopStr 2))
									(setq plyTroopDef (multiply plyTroopDef 2))
									(setq plyTroopDemo (multiply plyTroopDemo 2))
									)
							(geq (divide plyTroopcomo enemyTotComo) 2)
								(block Nil
									(setq plyTroopStr (divide (multiply plyTroopStr 3) 2))
									(setq plyTroopDef (divide (multiply plyTroopDef 3) 2))
									(setq plyTroopDemo (divide (multiply plyTroopDemo 3) 2))
									)
							(gr plyTroopcomo enemyTotcomo)
								(block Nil
									(setq plyTroopStr (divide (multiply plyTroopStr 5) 4))
									(setq plyTroopDef (divide (multiply plyTroopDef 5) 4))
									(setq plyTroopDemo (divide (multiply plyTroopDemo 5) 4))
									)
							(geq (divide enemyTotComo plyTroopcomo) 2)
								(block Nil
									(setq plyTroopStr (divide (multiply plyTroopStr 2) 3))
									(setq plyTroopDef (divide (multiply plyTroopDef 2) 3))
									(setq plyTroopDemo (divide (multiply plyTroopDemo 2) 3))
									)
							(geq (divide enemyTotComo plyTroopcomo) 3)
								(block Nil
									(setq plyTroopStr (divide plyTroopStr 2))
									(setq plyTroopDef (divide plyTroopDef 2))
									(setq plyTroopDemo (divide plyTroopDemo 2))
									)
							(geq (divide enemyTotComo plyTroopcomo) 5)
								(block Nil
									(setq plyTroopStr (divide plyTroopStr 3))
									(setq plyTroopDef (divide plyTroopDef 3))
									(setq plyTroopDemo (divide plyTroopDemo 3))
									)
							(geq (divide enemyTotComo plyTroopcomo) 10)
								(block Nil
									(setq plyTroopStr (divide plyTroopStr 5))
									(setq plyTroopDef (divide plyTroopDef 5))
									(setq plyTroopDemo (divide plyTroopDemo 5))
									)
							)

						;; compare stealth stats and modify enemy defense
						(switch
							(geq (divide plyTroopStealth enemyTotStealth) 10)
								(setq enemyTotDef (divide enemyTotDef 5))
							(geq (divide plyTroopStealth enemyTotStealth) 5)
								(setq enemyTotDef (divide enemyTotDef 3))
							(geq (divide plyTroopStealth enemyTotStealth) 3)
								(setq enemyTotDef (divide enemyTotDef 2))
							(geq (divide plyTroopStealth enemyTotStealth) 2)
								(setq enemyTotDef (multiply (divide enemyTotDef 2) 3))
							(gr plyTroopStealth enemyTotStealth)
								(setq enemyTotDef (multiply (divide enemyTotDef 4) 5))
							(geq (divide enemyTotStealth plyTroopStealth) 2)
								(setq plyTroopDef (multiply (divide plyTroopDef 2) 3))
							(geq (divide enemyTotStealth plyTroopStealth) 3)
								(setq plyTroopDef (divide plyTroopDef 2))
							(geq (divide enemyTotStealth plyTroopStealth) 5)
								(setq plyTroopDef (divide plyTroopDef 3))
							(geq (divide enemyTotStealth plyTroopStealth) 10)
								(setq plyTroopDef (divide plyTroopDef 5))
							)

						;; compare healer stats and modify health
						(switch
							(geq (divide plyTroopHeal enemyTotHeal) 10)
								(setq plyTroopHP (multiply plyTroopHP 5))
							(geq (divide plyTroopHeal enemyTotHeal) 5)
								(setq plyTroopHP (multiply plyTroopHP 3))
							(geq (divide plyTroopHeal enemyTotHeal) 3)
								(setq plyTroopHP (multiply plyTroopHP 2))
							(geq (divide plyTroopHeal enemyTotHeal) 2)
								(setq plyTroopHP (divide (multiply plyTroopHP 3) 2))
							(gr plyTroopHeal enemytotHeal)
								(setq plyTroopHP (divide (multiply plyTroopHP 5) 4))
							(geq (divide enemyTotHeal plyTroopHeal) 2)
								(setq enemyTotHP (divide (multiply enemyTotHP 3) 2))
							(geq (divide enemyTotStealth plyTroopStealth) 3)
								(setq enemyTotHP (divide enemyTotHP 2))
							(geq (divide enemyTotStealth plyTroopStealth) 5)
								(setq enemyTotHP (divide enemyTotHP 3))
							(geq (divide enemyTotStealth plyTroopStealth) 10)
								(setq enemyTotHP (divide enemyTotHP 5))
							)

						;; compare demolition stats and modify health
						(switch
							(geq (divide plyTroopDemo enemyTotDemo) 10)
								(setq enemyTotHp (divide enemyTotHp 5))
							(geq (divide plyTroopDemo enemyTotDemo) 5)
								(setq enemyTotHp (divide enemyTotHp 3))
							(geq (divide plyTroopDemo enemyTotDemo) 3)
								(setq enemyTotHp (divide enemyTotHp 2))
							(geq (divide plyTroopDemo enemyTotDemo) 2)
								(setq enemyTotHp (divide (multiply enemyTotHp 2) 3))
							(gr plyTroopDemo enemyTotDemo)
								(setq enemyTotHp (divide (multiply enemyTotHp 4) 5))
							(geq (divide enemyTotDemo plyTroopDemo) 2)
								(setq plyTroopHP (divide (multiply plyTroopHP 2) 3))
							(geq (divide enemyTotDemo plyTroopDemo) 3)
								(setq plyTroopHP (divide plyTroopHP 2))
							(geq (divide enemyTotDemo plyTroopDemo) 5)
								(setq plyTroopHP (divide plyTroopHP 3))
							(geq (divide enemyTotDemo plyTroopDemo) 10)
								(setq plyTroopHP (divide plyTroopHP 5))
							)

						;; finally, we compare strength to defense and modify health
						(setq newEnemyTotHP (subtract enemyTotHP (subtract plyTroopStr enemytotDef)))
						(setq NewplyTroopHP (subtract plyTroopHP (subtract enemyTotStr plyTroopDef)))

						(if (ls newEnemyTotHP enemyTotHP)
							(block (dmg enemyCasualties)
								(setq dmg (subtract enemyTotHp newEnemyTotHP))
								(setq enemyCasualties (divide dmg (bp_GetEnemyData (sovHack (objGetSovereign gSource)) 'HP)))
								(setq enemyTroopCount (subtract enemyTroopCount enemyCasualties))
								(objIncData gSource "enemyTroopcount" (multiply enemyCasualties -1))
								)
							)
						(if (ls newPlyTroopHP plyTroopHP)
							(block (dmg plyCasualties committed)
								(setq dmg (subtract plyTroopHp newPlyTroopHP))
								(enum (objGetItems gPlayerShip "* +TroopUnit") thisItem
									(if (and (geq dmg (itmGetStaticData thisItem "Health")) 
											(eq (itmGetData thisItem "committed") True)
											)
											(block nil
												;; increment the damage total
												(setq dmg (subtract dmg (itmGetStaticData thisItem "Health")))
												;; remove the committed status
												(objSetItemData gPlayerShip thisItem "Committed" Nil 1)
												;; track our casualties
												(setq plyTroopCount (subtract plyTroopCount 1))
												(dsf_setScreenState "plyTroopCount" (subtract (dsf_GetScreenState "plyTroopCount") 1))
												;; remove the destroyed troop
												(objRemoveItem gPlayerShip (itmCreate (itmGetUnid thisItem) 1) 1)
												)
										)
									)
								)
							)

						;; display all the totals after comparisons are made
						(dsf_DrawText "Player / Enemy" nil nil 'Medium 500 60 '(255 255 255) 'center)
						(dsf_DrawText (cat "troop count: "plyTroopCount" / "enemyTroopcount) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "strength: "plyTroopStr" / "enemyTotStr) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "defense: "plyTroopDef" / "enemyTotDef) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "health: "NewplyTroopHP" / "NewenemyTotHp) nil 20 'Medium nil nil '(255 0 0) 'center)
						(dsf_DrawText (cat "C3I : "plyTroopC3I" / "enemyTotC3I) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "Stealth: "plyTroopStealth" / "enemyTotStealth) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "Psionics: "plyTroopPsi" / "enemyTotPsi) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "Hacker: "plyTroopHack" / "enemyTothack) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "Healer: "plyTroopHeal" / "enemyTotHeal) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "Demolitions: "plyTroopDemo" / "enemyTotDemo) nil 20 'Medium nil nil '(255 255 255) 'center)
						(dsf_DrawText (cat "Commando: "plyTroopComo" / "enemyTotcomo) nil 20 'Medium nil nil '(255 255 255) 'center)
						
						)
					'actions		(list
						(list
							'name       '("Continue" 'C)
							'runFunc    '(block (enemyTroopCount plyTroopCount plyCommitted)
								(setq enemyTroopCount (objGetData gSource "enemyTroopCount"))
								(setq plyTroopCount (dsf_GetScreenState "plyTroopCount"))
								(setq plyCommitted (objGetData gSource "plyCommitted"))
								;; check if there are any enemy troops left alive
								(switch
									(leq enemyTroopcount 0)
										(bp_screenData 'BattleWin)
									(and (leq plyTroopcount 0) (eq plyCommitted True))
										(bp_ScreenData 'BattlePK)
									(leq plyTroopcount 0)
										(bp_screenData 'BattleLose)
									(bp_screenData 'TacticMain)
									)
								)
							)
						)
					)
			;; Combat successful
			(eq screen "BattleWin")
				(list
					'screenName     "Victory!!!"
					'paneDesc       "You have subdued all resistance!\n\nThe spoils of war are now yours for the taking!"
					'screenType     "Canvas"
					'hideBack       True
					'hideExit       True
					'canvasFunc		'(block nil
						)
					'initFunc		'(block (xp)
						;; calculate an appropriate xp reward
						;; if the player-commander entered combat earn a bonus
						(if (eq (objGetData gSource "plyCommitted") True)
							(setq xp 10)
							(setq xp 5)
							)
						;; adjust for sysLevel
						(setq xp (multiply xp (sysgetLevel)))
						;; add it to the total
						(objIncData gPlayerShip 'bpCommXP xp)
						)
					'actions		(list
						(list
							'name     	  '("Continue" 'C)
							'nextScreen		"&dsLoot;"
							'runFunc    	'(block Nil
								;; remember that battle has been completed
								(objIncData gPlayerShip 'bpVictories 1)
								(objSetData gSource "BattleDone" True)
								(setq gPrevScreen (dsf_ScreenTypeToUNID 'itemPickerStation))
								(setq gPrevPane "Default")
								)
							)
						)
					)
			;; Combat not successful
			(eq screen "BattleLose")
				(list
					'screenName     "Failure!!!"
					'paneDesc       (cat "You have been denied entry to "(objGetName gSource 4)"!")
					'screenType     "Canvas"
					'hideBack       True
					'hideExit       True
					'canvasFunc		'(block nil
						)
					'initFunc		'(block (xp)
						;; calculate an appropriate xp reward
						;; if the player-commander entered combat earn a bonus
						(if (eq (objGetData gSource "plyCommitted") True)
							(setq xp 5)
							(setq xp 1)
							)
						;; adjust for sysLevel
						(setq xp (multiply xp (sysgetLevel)))
						;; add it to the total
						(objIncData gPlayerShip 'bpCommXP xp)
						)
					'actions		(list
						(list
							'name       '("Launch a new offensive" 'L)
							'runFunc    '(bp_ScreenData 'TacticMain)
							)
						(list
							'name       '("Undock" 'U)
							'runFunc    '(block Nil
								(objIncData gPlayerShip 'bpFailures 1)
								(scrExitdock gScreen)
								)
							)
						)
					)
			;; Player killed in combat
			(eq screen "BattlePK")
				(list
					'screenName     "You were killed in combat!"
					'paneDesc       (cat "Your forces were gunned down and you along with them!")
					'screenType     "Canvas"
					'hideBack       True
					'hideExit       True
					'canvasFunc		'(block nil
						)
					'initFunc	'(block Nil
						)
					'actions	(list
						(list
							'name       '("Continue" 'C)
							'runFunc    '(block Nil
								(plyDestroyed gPlayer "was killed by in a boarding attempt")
								(scrExitdock gScreen)
								)
							)
						)
					)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					COMMANDER SCREENS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen is the entry point to the commander screens
;; It provides alot of handy info on the commander as well as links to other
;; important screens

			(eq screen "CommanderMain")
				(list
					'screenName     "Character Screen"
					'screenType     "Canvas"
					'noSave			True
					'hideBack       Nil
					'hideExit       Nil
					'canvasFunc	'(block (str def hp tac lvl xp xpnext points c3i stl psi hack heal dem como comr win lose)
							(setq str (objGetData gPlayerShip 'Strength))
							(setq def (objGetData gPlayerShip 'Defense))
							(setq hp (objGetData gPlayerShip 'HP))
							(setq tac (objGetData gPlayerShip 'Tactics))
							(setq lvl (objGetData gPlayerShip 'bpCommLevel))
							(setq xp (objGetData gPlayerShip 'bpCommXP))
							(setq xpnext (bp_ComputeXPNeeded))
							(setq points (objGetData gPlayerShip 'bpCommPoints))
							(setq c3i (objGetData gPlayerShip 'C3I))
							(setq stl (objGetData gPlayerShip 'Stealth))
							(setq psi (objGetData gPlayerShip 'Psionic))
							(setq hack (objGetData gPlayerShip 'Hacker))
							(setq heal (objGetData gPlayerShip 'Healer))
							(setq dem (objGetData gPlayerShip 'Demolition))
							(setq como (objGetData gPlayerShip 'Commando))
							(setq comr (objGetData gPlayerShip 'Commander))
							(setq win (objGetData gPlayerShip 'bpVictories))
							(setq lose (objGetData gPlayerShip 'bpFailures))
							
							(cnvDrawRect 0 0 600 400 '(8 8 8))
							
							(dsf_DrawText "Commander stats" nil nil 'HeaderBold 90 30 '(255 255 255) 'Left)
							(dsf_DrawText (cat "Strength: "str) 	nil 60 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Defense: "def) 		nil 20 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "HP: "hp) 			nil 20 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Tactics: "tac) 		nil 20 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Level: "lvl) 		nil 20 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "XP: "xp) 			nil 20 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Xp needed: "xpnext)	nil 20 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Free points: "points) nil 20 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Victories: "win)	nil 20 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Losses: "lose)	 	nil 20 'Medium nil nil '(255 255 255) 'Left)
							
							(dsf_DrawText "Skills" 					nil nil 'HeaderBold 300 30 '(255 255 255) 'Left)
							(dsf_DrawText (cat "C3I: "c3i) 			nil 60 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Stealth: "stl)		nil 20 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Psionics: "psi) 	nil 20 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Hacker: "hack)		nil 20 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Healer: "heal) 		nil 20 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Demolition: "dem) 	nil 20 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Commando: "como) 	nil 20 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Commander: "comr) 	nil 20 'Medium nil nil '(255 255 255) 'Left)
							)
					'actions	(list
						(list
							'name       '("Spend skill points" 'S)
							'runFunc    '(bp_ScreenData "CommanderUpgrade")
							'hideFunc	'(if (gr (objGetData gPlayerShip 'bpCommPoints) 0) Nil True)
							)
						(list
							'name       '("View personal inventory" 'V)
							'runFunc    '(bp_ScreenData "CommanderEquip")
							)
						(list
							'name       '("Join the battle" 'J)
							'hideFunc	'(eq (objGetData gSource "plyCommitted") True)
							'runFunc    '(block Nil
								(objSetData gSource "plyCommitted" True)
								(objSetData gplayerShip "plyCommitted" True)
								(bp_ScreenData "preBattleSummary")
								)
							)
						(list
							'name       '("Disengage from battle" 'D)
							'hideFunc	'(eq (objGetData gSource "plyCommitted") Nil)
							'runFunc    '(block Nil
								(objSetData gSource "plyCommitted" Nil)
								(objSetData gPlayerShip "plyCommitted" Nil)
								(bp_ScreenData "preBattleSummary")
								)
							)
						)
					)
					
			;; This screen is displayed when the player has achieved a new level
			(eq screen "CommanderUpgrade")
				(list
					'screenName     "Character upgrade screen"
					'paneDesc       '("Decide how you will evolve.\n\nFree points: (objgetData gPlayerShip 'bpCommPoints)")
					'screenType     "CustomPicker"
					'noSave			True
					'hideBack       Nil
					'hideExit       True
					'initFunc	'(block Nil
						)
					'customPicker   (list
						;;;; Skill upgrade
						(list
							'title      (cat "Strength: "(objGetData gPlayerShip "Strength"))
							'subtitle   "A measure of how much damage you deal to your enemies."
							'paneDesc   '("\n\n1 upgrade point will increase strengh by 3." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (objGetData gPlayerShip 'bpCommPoints) 0)
									'runFunc    '(block Nil
										(objIncData gPlayerShip 'Strength 3)
										(objIncData gPlayerShip 'bpCommPoints -1)
										(objSetData gSource 'plyStength (objGetData gPlayerShip 'Strength))
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Defense: "(objGetData gPlayerShip "Defense"))
							'subtitle   "Your ability to avoid being damaged."
							'paneDesc   '("\n\n1 upgrade point will increase defense by 3." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (objGetData gPlayerShip 'bpCommPoints) 0)
									'runFunc    '(block Nil
										(objIncData gPlayerShip 'Defense 3)
										(objIncData gPlayerShip 'bpCommPoints -1)
										(objSetData gSource 'plyDefense (objGetData gPlayerShip 'Defense))
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Health Points: "(objGetData gPlayerShip "HP"))
							'subtitle   "A measure of how much damage you deal to your enemies."
							'paneDesc   '("\n\n1 upgrade point will increase health by 3." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (objGetData gPlayerShip 'bpCommPoints) 0)
									'runFunc    '(block Nil
										(objIncData gPlayerShip 'Hp 3)
										(objIncData gPlayerShip 'bpCommPoints -1)
										(objSetData gSource 'plyHP (objGetData gPlayerShip 'HP))
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "C3I: "(objGetData gPlayerShip "C3I"))
							'subtitle   "Your ability to glean information and predict the enemy tactics."
							'paneDesc   '("\n\n1 upgrade point will increase C3I by 3." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (objGetData gPlayerShip 'bpCommPoints) 0)
									'runFunc    '(block Nil
										(objIncData gPlayerShip 'C3I 3)
										(objIncData gPlayerShip 'bpCommPoints -1)
										(objSetData gSource 'plyC3I (objGetData gPlayerShip 'C3I))
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Stealth: "(objGetData gPlayerShip "Stealth"))
							'subtitle   "Your skill at remaining hidden from detection."
							'paneDesc   '("\n\n1 upgrade point will increase stealth by 3." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (objGetData gPlayerShip 'bpCommPoints) 0)
									'runFunc    '(block Nil
										(objIncData gPlayerShip 'stealth 3)
										(objIncData gPlayerShip 'bpCommPoints -1)
										(objSetData gSource 'plystealth (objGetData gPlayerShip 'stealth))
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Psionic: "(objGetData gPlayerShip "Psionic"))
							'subtitle   "Look through your enemy's eyes and read their thoughts."
							'paneDesc   '("\n\n1 upgrade point will increase psionics by 3." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (objGetData gPlayerShip 'bpCommPoints) 0)
									'runFunc    '(block Nil
										(objIncData gPlayerShip 'psionic 3)
										(objIncData gPlayerShip 'bpCommPoints -1)
										(objSetData gSource 'plypsionic (objGetData gPlayerShip 'psionic))
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Hacker: "(objGetData gPlayerShip "Hacker"))
							'subtitle   "A master of the virtual dimensions is a master of them all."
							'paneDesc   '("\n\n1 upgrade point will increase hacker by 3." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (objGetData gPlayerShip 'bpCommPoints) 0)
									'runFunc    '(block Nil
										(objIncData gPlayerShip 'hacker 3)
										(objIncData gPlayerShip 'bpCommPoints -1)
										(objSetData gSource 'plyhacker (objGetData gPlayerShip 'hacker))
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Healer: "(objGetData gPlayerShip "Healer"))
							'subtitle   "Keeping your troops in the fight."
							'paneDesc   '("\n\n1 upgrade point will increase healer by 3." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (objGetData gPlayerShip 'bpCommPoints) 0)
									'runFunc    '(block Nil
										(objIncData gPlayerShip 'healer 3)
										(objIncData gPlayerShip 'bpCommPoints -1)
										(objSetData gSource 'plyhealer (objGetData gPlayerShip 'healer))
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Demolition: "(objGetData gPlayerShip "Demolition"))
							'subtitle   "There's a right way to use a bomb and a better way."
							'paneDesc   '("\n\n1 upgrade point will increase demolitions by 3." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (objGetData gPlayerShip 'bpCommPoints) 0)
									'runFunc    '(block Nil
										(objIncData gPlayerShip 'demolition 3)
										(objIncData gPlayerShip 'bpCommPoints -1)
										(objSetData gSource 'plydemolition (objGetData gPlayerShip 'demolition))
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Commando: "(objGetData gPlayerShip "commando"))
							'subtitle   "Knowing how to use all your skills at the appropriate time and make the most out of them."
							'paneDesc   '("\n\n1 upgrade point will increase commando by 3." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (objGetData gPlayerShip 'bpCommPoints) 0)
									'runFunc    '(block Nil
										(objIncData gPlayerShip 'commando 3)
										(objIncData gPlayerShip 'bpCommPoints -1)
										(objSetData gSource 'plycommando (objGetData gPlayerShip 'commando))
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Commander: "(objGetData gPlayerShip "commander"))
							'subtitle   "A good leader knows how to use his troops, like the pieces on a chess board, they all have their roll."
							'paneDesc   '("\n\n1 upgrade point will increase the number of troops you can take into battle by 5." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (objGetData gPlayerShip 'bpCommPoints) 0)
									'runFunc    '(block Nil
										(objIncData gPlayerShip 'commander 5)
										(objIncData gPlayerShip 'bpCommPoints -1)
										(objSetData gSource 'plycommander (objGetData gPlayerShip 'commander))
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						)
					)
			;; This screen provides the mechanics to equip/unequip personal combat items
			;; This screen will be available at the begining of combat and at any time through
			;; the external interface so we need a way to determine if we go to battle or not
			;; TODO: wow, so much.
			;; bp_EquipItem is not yet defined.  It should check the static data stats of the passed
			;; in item and increment the player's stats appropriately
			;; 
			;; the personal equipment needs types (armor, weapon, device etc.) to eliminate possible
			;; duplicates.
			(eq screen "CommanderEquip")
				(list
					'screenName     "Your personal armory"
					'screenType     "customPicker"
					'itemFilter     "* +Commander;"
					'noSave			True
					'hideBack       Nil
					'hideExit       True
					'actions	(list
						(list
							'name       '("Equip this item" 'E)
							'hideFunc	'(eq (itmGetData (dsf_GetListEntryData 'item) "Equipped") True)
							'runFunc    '(block (itm)
								(setq itm (dsf_GetListEntryData 'item))
								(objSetItemData gPlayerShip itm "Equipped" True 1)
								(objIncData gSource "plyStrength" (itmGetStaticData itm 'strength))
								(objIncData gSource "plyDefense" (itmGetStaticData itm 'defense))
								(objIncData gSource "plyHealth" (itmGetStaticData itm 'Health))
								(objIncData gSource "plyC3I" (itmGetStaticData itm 'C3I))
								(objIncData gSource "plyStealth" (itmGetStaticData itm 'stealth))
								(objIncData gSource "plyPsionics" (itmGetStaticData itm 'Psionics))
								(objIncData gSource "plyHacker" (itmGetStaticData itm 'Hacker))
								(objIncData gSource "plyHealer" (itmGetStaticData itm 'Healer))
								(objIncData gSource "plyDemolitions" (itmGetStaticData itm 'Demolitions))
								(objIncData gSource "plyCommando" (itmGetStaticData itm 'Commando))
								(objIncData gSource "plyCommander" (itmGetStaticData itm 'Commander))
								(bp_ScreenData "CommanderEquip")
								)
							)
						(list
							'name       '("Unequip this item" 'U)
							'hideFunc	'(eq (itmGetData (dsf_GetListEntryData 'item) "Equipped") Nil)
							'runFunc    '(block Nil
								(objSetItemData gPlayerShip (dsf_GetListEntryData 'item) "Equipped" Nil 1)
								(objIncData gSource "plyStrength" (multiply -1 (itmGetStaticData itm 'strength)))
								(objIncData gSource "plyDefense" (multiply -1 (itmGetStaticData itm 'defense)))
								(objIncData gSource "plyHealth" (multiply -1 (itmGetStaticData itm 'Health)))
								(objIncData gSource "plyC3I" (multiply -1 (itmGetStaticData itm 'C3I)))
								(objIncData gSource "plyStealth" (multiply -1 (itmGetStaticData itm 'stealth)))
								(objIncData gSource "plyPsionics" (multiply -1 (itmGetStaticData itm 'Psionics)))
								(objIncData gSource "plyHacker" (multiply -1 (itmGetStaticData itm 'Hacker)))
								(objIncData gSource "plyHealer" (multiply -1 (itmGetStaticData itm 'Healer)))
								(objIncData gSource "plyDemolitions" (multiply -1 (itmGetStaticData itm 'Demolitions)))
								(objIncData gSource "plyCommando" (multiply -1 (itmGetStaticData itm 'Commando)))
								(objIncData gSource "plyCommander" (multiply -1 (itmGetStaticData itm 'Commander)))
								(bp_ScreenData "CommanderEquip")
								)
							)
						)
					'customPicker	(block (displayList)
						(setq displayList (list))
						(objEnumItems gPlayerShip "* +Commander;" itm (block Nil
							(lnkAppend displayList
								(list
									'title      (cat (itmGetName itm 8) (if (itmGetData itm "Equipped") " - Equipped" ""))
									'image		(itmGetImageDesc itm)
									'subtitle   (typGetDataField (itmGetunid itm) 'description)
									'item		itm
									)
								)
							))
							displayList
						)
					)
					
			)
		))) ;; end of boarding parties screens
</Globals>

</TranscendenceExtension>