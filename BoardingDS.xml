<?xml version="1.0" ?>
<!DOCTYPE TranscendenceExtension
[
	<!ENTITY BP_Screens					"0xD5125500">
	<!ENTITY itBoardingAdvertiser		"0xD5125501">
	
	<!ENTITY rs_bpIntro					"0xD5125510">
	<!ENTITY rs_bpIntroLights			"0xD5125511">
	<!ENTITY rs_bpIntroPieces			"0xD5125512">
	<!ENTITY sn_bpAlarm					"0xD5125513">
	<!ENTITY ef_bpAlarm					"0xD5125514">
	<!ENTITY rs_bpTacticIcons			"0xD5125515">
	
	<!ENTITY dsAbandonedStation			"0x0000A003">
	<!ENTITY dsAbandonedShip			"0x0000A017">
]>

<TranscendenceExtension UNID="&BP_Screens;" version="1.0"
     name="Boarding Parties" 
     credits="Mike Mosher (Prophet), alterecco, digdug, bobby,"
	 >

    <ItemType UNID="&itBoardingAdvertiser;"
        name=       "Boarding Parties Advertiser"
        frequency=  "notrandom"
        modifiers=  "ScreenHook; TerminalService; CannotOrder; NotForSale;"
        >
        <Image imageID="&rsItems1;" imageX="0" imageY="288" imageWidth="96" imageHeight="96"/>
        <StaticData>
            <HookTitle>"Boarding Parties Screen Browser"</HookTitle>
            <HookSubtitle>"This will be the entry point for the commander screens but for now we can browse them all."</HookSubtitle>
            <ScreenData>'(bp_ScreenData 'Debug)</ScreenData>
        </StaticData>
    </ItemType>

<!-- Abandoned station looting screen -->

	<DockScreen UNID="&dsAbandonedStation;"
			name=				"=(objGetName gSource)"
			>

		<OnInit>
			(bp_InitializeBattle)
		</OnInit>
		
		<Panes>
			<Default
					desc=		"You are docked at the lifeless ruins of a destroyed station. Wrecked machinery and smoldering bodies litter the silent, cavernous bay.">

				<Actions>
					<Action name="Loot" key="L" default="1" >
						(block Nil
							(setq gPrevScreen "&dsAbandonedStation;")
							(scrShowScreen gScreen "&dsLoot;")
							)
					</Action>

					<Action name="Jettison" key="J">
						(block Nil
							(setq gPrevScreen "&dsAbandonedStation;")
							(scrShowScreen gScreen "&dsJettison;")
							)
					</Action>

					<Action name="Undock" cancel="1" key="U">
						<Exit/>
					</Action>

				</Actions>

			</Default>
		</Panes>

	</DockScreen>

	<!-- Abandoned ship looting screen -->
	
	<DockScreen UNID="&dsAbandonedShip;"
			name=				"=(objGetName gSource)"
			>

		<OnInit>
			(bp_InitializeBattle)
		</OnInit>

		<Panes>
			<Default
					desc=		"You are docked with the wreck of a ship.">

				<Actions>
					<Action name="Loot" key="L" default="1" >
						(block Nil
							(setq gPrevScreen "&dsAbandonedShip;")
							(scrShowScreen gScreen "&dsLoot;")
							)
					</Action>

					<Action name="Jettison" key="J">
						(block Nil
							(setq gPrevScreen "&dsAbandonedShip;")
							(scrShowScreen gScreen "&dsJettison;")
							)
					</Action>

					<Action name="Undock" cancel="1" key="U">
						<Exit/>
					</Action>

				</Actions>

			</Default>
		</Panes>

	</DockScreen>

<Globals>
	(setq bp_ScreenData (lambda (screen) (block Nil
		(switch
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;						Debug screen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen is used for debugging and should have access to all other screens.
			(eq screen "Debug")
				(list
					'screenName     "We're debugging, so we can go anywhere!"
					'paneDesc       "Welcome to the boarding parties back door!"
					'screenType     "CustomPicker"
					'hideBack       True
					'initFunc		'(bp_InitializePlayerData)
					'customPicker   (list
						;;;; Screen Browser
						(list
							'title      "Initial screen"
							'subtitle   "The intended initial screen"
							'paneDesc   '("\n\nWhen a combat is about to begin, this screen should be displayed." '+)
							'actions    (list
								(list
									'name       '("View the Initial Screen" 'I)
									'runFunc    '(bp_ScreenData "Warning")
								))
						)
						(list
							'title      "Tactics screen"
							'subtitle   "Choose your destiny!"
							'paneDesc   '("\n\nThe player must decide the best course of action." '+)
							'actions    (list
								(list
									'name       '("View the Tactics Screen" 'T)
									'runFunc    '(bp_ScreenData "TacticMain")
								))
						)
						(list
							'title      "Troop select screen"
							'subtitle   "Send in the bots!"
							'paneDesc   '("\n\nThe best way to make friends is to kill their enemies." '+)
							'actions    (list
								(list
									'name       '("View the troop Select screen" 'S)
									'runFunc    '(bp_ScreenData "TroopSelect")
								))
						)
						(list
							'title      "Battle screen"
							'subtitle   "In space, no one can hear them scream!"
							'paneDesc   '("\n\nWatch your bots in action." '+)
							'actions    (list
								(list
									'name       '("View the Battle screen" 'B)
									'runFunc    '(bp_ScreenData "BattleCalc")
								))
						)
						(list
							'title      "Commander screen"
							'subtitle   "Finally, some personal screen time!"
							'paneDesc   '("\n\nTaking the fight to a personal level." '+)
							'actions    (list
								(list
									'name       '("View the Commander screen" 'B)
									'runFunc    '(bp_ScreenData "CommanderMain")
								))
						)
						)
					)
					
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;						Initial screen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen is the entrance to the battle, warning the player that there is combat 
			(eq screen "Warning")
				(list
					'screenName     "WARNING"
					'paneDesc       "Sensors indicate hostiles are still active!"
					'screenType     "AnimatedCanvas"
					'hideBack       True
					'hideExit       Nil
					;; 		----------	TESTING NOTES	----------
					;; current testing shows that the animated canvas updates about 3x/sec
					;; and each screen update is about 2.5 ticks in system time
					;; making game time run at approx 1/4 speed
					;; therefore, if a station is destroyed and calls reinforcements who would normally
					;; arrive in 30 sec (real time) the player has about 2 mins in the boarding screens
					;; before the reinforcements arrive and begin destoying them...
					'canvasFunc	'(block (timer door)
						;; set the timer into a local var now
						(setq timer (dsf_GetScreenState 'timer))
						
						;; the placement of the images is very important
						;; we must start with the background and move to the foreground
						(cnvDrawImage 185 159 (list &rs_bpIntroPieces; 356 0 230 200)) ;;hallway
						
						(cnvDrawImage (subtract 147 (multiply timer 3)) 164 (list &rs_bpIntroPieces; 0 0 190 200)) ;; left door
						(cnvDrawImage (add 244 (multiply timer 3)) 162 (list &rs_bpIntroPieces; 188 0 170 200)) ;; right door
							
						(cnvDrawImage 0 0 (list &rs_bpIntro; 0 0 600 400)) ;; foreground
						
						;; blinking lights and an alarm for effect
						(if (eq (modulo timer 2) 1)
							(block nil
								(cnvDrawImage 0 0 (list &rs_bpIntroLights; 0 0 600 400)) ;; flashing lights
								;; 2 unids used to make this damn sound effect!!  oh well...
								(sysCreateEffect &ef_bpAlarm; gSource (objGetPos gSource))
								)
							)
						(if (gr timer 9) 
							(dsf_SetScreenState 'reverse -1)
							)
						(if (leq timer 0)
							(dsf_SetScreenState 'reverse 1)
							)
						(dsf_SetScreenState 'timer (add timer (multiply 1 (dsf_getScreenState 'reverse))))
						)
						
					;; set up all our data for the enemy
					;; mark that combat is init-ed 
					'initFunc	'(block Nil
						(dsf_SetScreenState 'timer 1)
						(dsf_SetScreenState 'reverse 1)
						;; We have found enemy resistance so load up some data
						(bp_InitializeEnemy)
						)
					'actions	(list
						(list
							'name       '("Begin preparations" 'B)
							'hideFunc	nil  ;; '(leq (dsf_GetScreenState 'door) 100)
							'runFunc    '(block nil
								(if (ls (count (objGetItems gPlayerShip "*+TroopUnit")) 1)
									(bp_ScreenData 'TacticMain)
									(bp_ScreenData 'TroopSelect)
									)
								)
							)
						(list
							'name       '("Continue" 'C)
							'hideFunc	True ;; '(gr (dsf_GetScreenState 'door) 1)
							'runFunc    '(block nil
								(dsf_SetScreenState 'open 1)
								(bp_ScreenData 'warning)
								)
							)
						(list
							'name       '("Perform intensive scan" 'P)
							'runFunc    '(bp_ScreenData "Scan")			;; TODO: this screen does not yet exist!
							'hideFunc	'(not (objGetItems gPlayerShip "*I+BattleScan"))	;; TODO: no item yet exists for this
							)
						)
					)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;						TROOP SCREENS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen allows the player to choose the troops that will be sent into combat
			(eq screen "TroopSelect")
				(list
					'screenName     "Troop select"
					'paneDesc       "Select which troop units you will commit to battle."
					'screenType     "CustomPicker"
					'itemFilter     "* +TroopUnit;"
					'noSave         Nil
					'hideBack       True
					'hideExit       True
					'actions            (list
						(list
							'name       '("Select" 'S)
							'hideFunc	'(itmGetData (dsf_GetListEntryData 'troop) "Committed")
							'runFunc    '(block Nil
								(dsf_SetScreenState 'troop (dsf_GetListEntryData 'troop))
								(bp_ScreenData 'TroopCount)
								)
							)
						(list
							'name       '("De-Select" 'D)
							'hideFunc	'(eq (itmGetData (dsf_GetListEntryData 'troop) "Committed") Nil)
							'runFunc    '(block (troop)
								(setq troop (dsf_GetListEntryData 'troop))
								(objSetItemData gPlayerShip troop "Committed" Nil (itmGetCount troop))
								(bp_ScreenData 'TroopSelect)
								)
							)
						(list
							'name       '("Choose tactic" 'C)
							'runFunc    '(bp_ScreenData 'TacticMain)
							)
						) ;; end of actions

					'customPicker	(block (displayList)
						(setq displayList (list))
						(objEnumItems gPlayerShip "*+TroopUnit;" troop (block Nil
							(lnkAppend displayList
								(list
									'title      (cat (itmGetName troop 8) (if (itmGetData troop 'Committed) " - Committed" ""))
									'image		(itmGetImageDesc troop)
									'subtitle   (cat (itmGetStaticData troop 'Desc)
										" - Ranged attack: "(itmGetStaticData troop 'rngPwr)" x"(itmGetStaticData troop 'rngSpd)" at "(itmGetStaticData troop 'rngAcu)"%. "
										"Melee attack: "(itmGetStaticData troop 'MelPwr)" x"(itmGetStaticData troop 'MelSpd)" at "(itmGetStaticData troop 'MelAcu)"%. "
										"Shields: "(itmGetStaticData troop 'DefShd)", Armor: "(itmGetStaticData troop 'defArm)", HP: "(itmGetStaticData troop 'defHP)
										" SKILLS - Hacker:"(itmGetStaticData troop 'Hacker)" Stealth:"(itmGetStaticData troop 'Stealth)
										" Psionic:"(itmGetStaticData troop 'Psionic)" Demolition:"(itmGetStaticData troop 'Demolition)
										" Repair:"(itmGetStaticData troop 'Repair)" Recon:"(itmGetStaticData troop 'Recon)
										)
									'troop		troop
									)
								)
							))
							displayList
						)
					)
			;; Select the number of troops to be sent in
			(eq screen "TroopCount")
				(list
					'screenName     "Troop select, count"
					'paneDesc       "Your commander skill limits the number of troops that you can command at one time."
					'paneType       "Counter"
					'hideBack       Nil
					'hideExit       True
					'noSave			True
					'initFunc	'(block (maxCount commanderMaxCount committed)
						(setq committed 0)
						(enum (objGetItems gPlayerShip "* +TroopUnit") thisItem
							(if (itmGetData thisItem "committed")
								(setq committed (add committed (itmGetCount thisItem)))
								)
							)
						(setq maxCount (itmGetCount (dsf_GetScreenState 'troop)))
						(setq commanderMaxCount (subtract (dsf_GetData 'plyBpCmr) committed))
						(scrSetCounter gScreen (min maxCount commanderMaxCount))
						)
					'actions	(list
						(list
							'name       '("Commit to battle" 'C)
							'hideFunc	(eq (count (objGetItems gPlayerShip "*+TroopUnit")) nil)
							'runFunc    '(block (troop cnt maxCount commanderMaxCount committed)
								(setq committed 0)
								(enum (objGetItems gPlayerShip "*+TroopUnit") thisItem
									(if (itmGetData thisItem "committed")
										(setq committed (add committed (itmGetCount thisItem)))
										)
									)
								(setq maxCount (itmGetCount (dsf_GetScreenState 'troop)))
								(setq commanderMaxCount (subtract (dsf_GetData 'plyBpCmr) committed))
								(setq cnt (scrGetCounter gScreen))
								(switch
									(leq cnt 0)
										(block Nil
											(dsf_BuildPaneDesc "\nInvalid amount.")
											(bp_ScreenData 'TroopCount)
											)
									
									(gr cnt maxCount)
										(block Nil
											(dsf_BuildPaneDesc "\nYou do not have enough troops.")
											(bp_ScreenData 'TroopCount)
											)
									
									(gr cnt commanderMaxCount)
										(block Nil
											(dsf_BuildPaneDesc "\nYou cannot command that many troops.")
											(bp_ScreenData 'TroopCount)
											)
											
									(block nil
										(objSetItemData gPlayerShip (dsf_GetScreenState 'troop) "Committed" True cnt)
										(bp_ScreenData 'TroopSelect)
										)
									)
								)
							)
						)
					)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;					
;;						TACTIC SCREENS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen will display the tactics available to the player
;; It will be vastly expanded once it is back to a working state
			(eq screen "TacticMain")
				(list
					'screenName     "Choose your battle tactic wisely!"
					'paneDesc       "The available options are dependent on the commander's tactic skill."
					'screenType     "CustomPicker"
					'hideBack       Nil
					'hideExit       True
					'customPicker   (list
						;;;; Tactics Browser
						(list
							'title      "Reckless attack"
							'subtitle   "Send in the troops."
							'image      '(&rs_bpTacticIcons; 0 0 96 96)
							'paneDesc   '("\nThe most basic strategy ever: shoot." '+)
							'actions	(list
								(list
									'name       '("Select" 'S)
									'runFunc    '(block Nil
										;; turn all these screen data calls into a helper with the following args
										;; (bp_SetTactic '('name rngPwr rngSpd rngAcu melPwr melSpd melAcu Shd Arm HP))
										;; for example: (bp_SetTactic '('attack 100 100 100 100 100 100 100 100 100))
										(dsf_SetScreenState 'Tactic 'attack)
										(dsf_SetScreenState 'tacRngPwr 100)
										(dsf_SetScreenState 'tacRngSpd 100)
										(dsf_SetScreenState 'tacRngAcu 100)
										(dsf_SetScreenState 'tacMelPwr 100)
										(dsf_SetScreenState 'tacMelSpd 100)
										(dsf_SetScreenState 'tacMelAcu 100)
										(dsf_SetScreenState 'tacDefShd 100)
										(dsf_SetScreenState 'tacDefArm 100)
										(dsf_SetScreenState 'tacDefHP 100)
										;; what screen will this take us to?
										(bp_ScreenData "preBattleSummary")
										)
									)
								)
							)
						(list
							'title      "Retreat"
							'subtitle   "Pull the troops out."
							'image      '(&rs_bpTacticIcons; 96 0 96 96)
							'paneDesc   '("\nThe second most basic strategy ever: run away." '+)
							'actions	(list
								(list
									'name       '("Select" 'S)
									'runFunc    '(bp_ScreenData 'BattleLose)
									)
								)
							)
						(list
							'title      "Psionic Attack"
							'subtitle   "Use those egg heads to their full potential."
							'paneDesc   '("\nWhy kill your enemies when you can enslave them?" '+)
							'hideList   '(and (leq (dsf_GetData 'plyBPTac) 4)
								(leq (dsf_GetData 'plyPsionic) 10))
							'actions	(list
								(list
									'name       '("Select" 'S)
									'runFunc    '(block Nil
										(dsf_SetScreenState "Tactic" 'psionic)
										(bp_ScreenData "Psionic") ;; TODO: create these special tactic screens
										)
									)
								)
							)
							
						) ;; tactics custom picker end
					) ;; tacticMain end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					BATTLE SCREENS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen should show a summary of the stat subtotals 
;; and provide an option to view all committed troops
;; perhaps an option to link into the commander screens as well
;; this is the last checkpoint before we begin te battle calcs.
			(eq screen "preBattleSummary")
				(list
					'screenName     "You are about to enter battle."
					'paneDesc       "Check your final stats before entering combat!"
					'screenType     "Canvas"
					'hideBack       Nil
					'hideExit       True
					'canvasFunc	'(block (committed cnt trpRngPwr trpRngSpd trpRngAcu trpMelPwr trpMelSpd trpMelAcu trpDefShd trpDefArm trmDefHP
						trpHacker trpStealth trpPsionic trpDemolition trpRepair trpRecon)
						;; init some vars
						(setq cnt 0)
						(setq trpRngPwr 0)
						(setq trpRngSpd 0)
						(setq trpRngAcu 0)
						(setq trpMelPwr 0)
						(setq trpMelSpd 0)
						(setq trpMelAcu 0)
						(setq trpDefShd 0)
						(setq trpDefArm 0)
						(setq trmDefHP 0)
						(setq trpHacker 0)
						(setq trpStealth 0)
						(setq trpPsionic 0)
						(setq trpDemolition 0)
						(setq trpRepair 0)
						(setq trpRecon 0)
						(setq plyCommitted (if (eq (dsf_GetData "plyCommitted") True) "Yes" "No"))
						
						;; build a list of our committed troops and total up their stats
						(setq committed (list))
						(enum (objGetItems gPlayerShip "*+TroopUnit") thisItem
							(if (itmGetData thisItem 'committed)
								(block Nil
									(lnkAppend committed thisItem)
									(setq cnt (add cnt (itmGetCount thisItem)))
									(setq trpRngPwr (add trpRngPwr (multiply cnt (itmGetStaticData thisItem 'RngPwr))))
									(setq trpRngSpd (add trpRngSpd (multiply cnt (itmGetStaticData thisItem 'RngSpd))))
									(setq trpRngAcu (add trpRngAcu (multiply cnt (itmGetStaticData thisItem 'RngAcu))))
									(setq trpMelPwr (add trpMelPwr (multiply cnt (itmGetStaticData thisItem 'MelPwr))))
									(setq trpMelSpd (add trpMelSpd (multiply cnt (itmGetStaticData thisItem 'MelSpd))))
									(setq trpMelAcu (add trpMelAcu (multiply cnt (itmGetStaticData thisItem 'MelAcu))))
									(setq trpDefShd (add trpDefShd (multiply cnt (itmGetStaticData thisItem 'DefShd))))
									(setq trpDefArm (add trpDefArm (multiply cnt (itmGetStaticData thisItem 'DefArm))))
									(setq trmDefHP (add trmDefHP (multiply cnt (itmGetStaticData thisItem 'DefHP))))
									(setq trpHacker (add trpHacker (multiply cnt (itmGetStaticData thisItem 'Hacker))))
									(setq trpStealth (add trpStealth (multiply cnt (itmGetStaticData thisItem 'Stealth))))
									(setq trpPsionic (add trpPsionic (multiply cnt (itmGetStaticData thisItem 'Psionic))))
									(setq trpDemolition (add trpDemolition (multiply cnt (itmGetStaticData thisItem 'Demolition))))
									(setq trpRepair (add trpRepair (multiply cnt (itmGetStaticData thisItem 'Repair))))
									(setq trpRecon (add trpRecon (multiply cnt (itmGetStaticData thisItem 'Recon))))
									)
								)
							)
						;; remember all these totals for use in the final combat calcs
						(dsf_SetScreenState 'plyTroopCount cnt)
						(dsf_SetScreenState 'trpRngPwr trpRngPwr)
						(dsf_SetScreenState 'trpRngSpd trpRngSpd)
						(dsf_SetScreenState 'trpRngAcu trpRngAcu)
						(dsf_SetScreenState 'trpMelPwr trpMelPwr)
						(dsf_SetScreenState 'trpMelSpd trpMelSpd)
						(dsf_SetScreenState 'trpMelAcu trpMelAcu)
						(dsf_SetScreenState 'trpDefShd trpDefShd)
						(dsf_SetScreenState 'trpDefArm trpDefArm)
						(dsf_SetScreenState 'trpDefHP trmDefHP)
						(dsf_SetScreenState 'trpHacker trpHacker)
						(dsf_SetScreenState 'trpStealth trpStealth)
						(dsf_SetScreenState 'trpPsionic trpPsionic)
						(dsf_SetScreenState 'trpDemolition trpDemolition)
						(dsf_SetScreenState 'trpRepair trpRepair)
						(dsf_SetScreenState 'trpRecon trpRecon)

						(if (leq (count committed) 0)
							(block Nil
								(cnvDrawRect 40 70 160 150 '(8 8 8))
								(dsf_DrawText "WARNING!!!" nil nil 'HeaderBold 120 70 '(255 0 0) 'center)
								(dsf_DrawText "You have not selected any" nil 40 nil nil nil nil 'center)
								(dsf_DrawText "troops to enter battle!" nil 20 nil nil nil nil 'center)
								)
							(block Nil
								;; now we finally do some canvas stuff to display where the troop totals are sitting
								;; dsf_DrawText args (text deltaX deltaY font x y color align)
								(cnvDrawRect 40 70 200 270 '(8 8 8))
								(dsf_DrawText (cat "Chosen Tactic: "(dsf_GetScreenState 'tactic)) nil nil 'largeBold 50 70)
								(dsf_DrawText (cat "Total troops committed: "cnt) 10 30)
								(dsf_DrawText (cat "Total ranged power: "(dsf_GetScreenState 'trpRngPwr)) nil 30)
								(dsf_DrawText (cat "Average ranged speed: "(divide (dsf_GetScreenState 'trpRngSpd) cnt)) nil 20)
								(dsf_DrawText (cat "Average ranged accuracy: "(divide (dsf_GetScreenState 'trpRngAcu) cnt)) nil 20)
								(dsf_DrawText (cat "Total melee power: "(dsf_GetScreenState 'trpMelPwr)) nil 30)
								(dsf_DrawText (cat "Average melee speed: "(divide (dsf_GetScreenState 'trpMelSpd) cnt)) nil 20)
								(dsf_DrawText (cat "Average melee accuracy: "(divide (dsf_GetScreenState 'trpMelAcu) cnt)) nil 20)
								(dsf_DrawText (cat "Total shield defense: "(dsf_GetScreenState 'trpDefShd)) nil 30)
								(dsf_DrawText (cat "Total armor defense: "(dsf_GetScreenState 'trpDefArm)) nil 20)
								(dsf_DrawText (cat "Total Health points: "(dsf_GetScreenState 'trpDefHP)) nil 20)
								)
							)
						;; if the player commander is going to enter combat, include that data as well
						(if (eq plyCommitted 'Yes)
							(block Nil
								(cnvDrawRect 310 70 220 300 '(8 8 8))
								(dsf_DrawText "Commander Committed" 0 0 'largeBold 320 70 '(0 255 0))
								(dsf_DrawText (cat "Commander ranged power: "(dsf_GetData 'plyRngPwr)) 10 30 'medium)
								(dsf_DrawText (cat "Commander ranged speed: "(dsf_GetData 'plyRngSpd)) nil 20)
								(dsf_DrawText (cat "Commander ranged accuracy: "(dsf_GetData 'plyRngAcu)) nil 20)
								(dsf_DrawText (cat "Commander melee power: "(dsf_GetData 'plyMelPwr)) nil 30)
								(dsf_DrawText (cat "Commander melee speed: "(dsf_GetData 'plyMelSpd)) nil 20)
								(dsf_DrawText (cat "Commander melee accuracy: "(dsf_GetData 'plyMelAcu)) nil 20)
								(dsf_DrawText (cat "Commander shield strength: "(dsf_GetData 'plyDefShd)) nil 30)
								(dsf_DrawText (cat "Commander armor strength: "(dsf_GetData 'plyDefArm)) nil 20)
								(dsf_DrawText (cat "Commander health points: "(dsf_GetData 'plyDefHP)) nil 20)
								)
							;; the player commander isn't committed so inform the player how to engage
							(block Nil
								(cnvDrawRect 290 60 260 120 '(8 8 8))
								(dsf_DrawText "Commander not committed!" nil nil 'HeaderBold 420 70 '(255 0 0) 'center)
								(dsf_DrawText "If you would like to personally join" nil 40 'medium nil nil nil 'center)
								(dsf_DrawText "in the combat, check your status to" nil 20 nil nil nil nil 'center)
								(dsf_DrawText "ensure that you are properly equipped." nil 20 nil nil nil nil 'center)
								)
							)
						) ;; end of canvas func
					'actions	(list
						(list
							'name       '("Engage the enemy" 'E)
							'hideFunc	'(and (leq (dsf_GetScreenState 'plyTroopCount) 0) (not (dsf_GetData 'plyCommitted)))
							'runFunc    '(bp_ScreenData 'BattleCalc)
							)
						(list
							'name       '("Commander status" 'C)
							'runFunc    '(bp_ScreenData 'CommanderMain)
							)
						(list
							'name       '("Select troops" 'S)
							'hideFunc	(leq (leq (dsf_GetScreenState 'plyTroopCount) 0) 0)
							'runFunc    '(bp_ScreenData 'TroopSelect)
							)
						)
					) ;; end of battle summary screen

;; This screen calculates the combat outcome
;; This is where all the juicy math happens that compares the opposing forces
;; and calculates casualties
			(eq screen "BattleCalc")
				(list
					'screenName     (cat (objGetName gSource) "'s cargobay.")
					'paneDesc       "The battle rages!"
					'screenType     "Canvas"
					'hideBack       True
					'hideExit       True
					'canvasFunc		'(block (totPlyRngDmg totEnmRngDmg plyCasualties)
					
						(setq totPlyRngDmg 0)
						
						;; calculate player and plyTroop ranged damage
						;; we have 2 cases, with and without the commander
						(if (dsf_GetData 'plyCommitted)
							(setq totPlyRngDmg (add 
								(bp_RngDmgCalc)
								(divide (multiply 
									(divide (multiply (dsf_GetData 'plyRngPwr) (dsf_GetScreenState 'tacRngPwr) (dsf_GetScreenState 'evnRngPwr)) 10000)
									(divide (multiply (dsf_GetData 'plyRngSpd) (dsf_GetScreenState 'tacRngSpd) (dsf_GetScreenState 'evnRngSpd)) 10000)
									(divide (multiply (dsf_GetData 'plyRngAcu) (dsf_GetScreenState 'tacRngAcu) (dsf_GetScreenState 'evnRngAcu)) 10000)
									) 100)
								))
							(setq totPlyRngDmg (bp_RngDmgCalc))
							)
						(dsf_DrawText (cat "Total damage dealt by the commander's forces: "totPlyrngDmg) 0 0 'Large 300 10 '(0 255 0) 'center)

;; now we have total ranged damage, let's apply it to the enemy force
						(switch
							;; totally annihilated!!!!
							(geq totPlyRngDmg (multiply (add (objGetData gSource 'enmDefShd) (objGetData gSource 'enmDefArm) 
								(objGetData gSource 'enmDefHP)) (objGetData gSource 'enmTroopCount))
								)
								(block Nil
									(setq plyTotRngDmg (subtract plyTotRngDmg 
										(add (objGetData gSource 'enmDefShd) (objGetData gSource 'enmDefArm) (objGetData gSource 'enmDefHP))))
									(objSetData gSource 'enmDefShd 0)
									(objSetData gSource 'enmDefArm 0)
									(objSetData gSource 'enmDefHP 0)
									(objSetData gSource 'enmTroopCount 0)
									(dsf_DrawText "Congrats!  The enemy has been decimated!" 0 20 'Large nil nil '(0 255 0) 'center)
									)
							;; shields and armor totally gone, some hp dmg
							(geq totPlyRngDmg (multiply (add (objGetData gSource 'enmDefShd) (objGetData gSource 'enmDefArm))
								(objGetData gSource 'enmTroopCount))
								)
								(block Nil
									(setq plyTotRngDmg (subtract plyTotRngDmg (add (objGetData gSource 'enmDefShd) (objGetData gSource 'enmDefArm))))
									(objSetData gSource 'enmDefShd 0)
									(objSetData gSource 'enmDefArm 0)
									(objIncData gSource 'enmDefHP (multiply -1 plyTotRngDmg))
									(dsf_DrawText "The enemy is nearly defeated!" 0 30 'Large nil nil '(0 255 0) 'center)
									)
							;; shields totally gone, some armor dmg
							(geq totPlyRngDmg (multiply (add (objGetData gSource 'enmDefShd)) (objGetData gSource 'enmTroopCount)))
								(block Nil
									(setq plyTotRngDmg (subtract plyTotRngDmg (objGetData gSource 'enmDefShd)))
									(objSetData gSource 'enmDefShd 0)
									(objIncData gSource 'enmDefArm (multiply -1 plyTotRngDmg))
									(dsf_DrawText "The enemy is taking damage!" 0 30 'Large nil nil '(0 255 0) 'center)
									)
							;; some minor shield damage
							(leq totPlyRngDmg (multiply (add (objGetData gSource 'enmDefShd)) (objGetData gSource 'enmTroopCount)))
								(block Nil
									(objIncData gSource 'enmDefShd (multiply -1 plyTotRngDmg))
									(dsf_DrawText "You managed to hit them!  Now they're angry!" 0 30 'Large nil nil '(0 255 0) 'center)
									)
							)

;; if there are any enemy survivors they will fire back
						(setq totEnmRngDmg 0)
						(if (gr (objGetData gSource 'enmTroopCount) 0)
							(for i 1 (objGetData gSource 'enmTroopCount)
								(setq totEnmRngDmg (add totEnmRngDmg 
									(divide (multiply 
										(objGetData gSource 'enmRngPwr)
										(objGetData gSource 'enmRngSpd)
										(objGetData gSource 'enmRngAcu)
										) 100)
									))
								)
							)
						(dsf_DrawText (cat "The enemy has inflicted "totEnmRngDmg" damage on your forces!") 0 30 'Large nil nil '(255 0 0) 'center)
						;; calculate how much damage the enemy does to the commander's troops (and possibly the commander!)
						(switch
							;; totally annihilated!!!! Very very bad!!!!
							(geq totEnmRngDmg (add (dsf_GetScreenState 'trpDefShd) (dsf_GetScreenState 'trpDefArm) (dsf_GetScreenState 'trpDefHP)
								(dsf_getData 'plyDefShd) (dsf_GetData 'plyDefArm) (dsf_GetData 'plyDefHP))
								)
								(block Nil
									;; mark that they're all destroyed
									(dsf_SetScreenState 'plyTroopCount 0)
									;; remove them from the playership
									(objEnumItems gPlayerShip "*+TroopUnit" theItem
										(if (eq (itmGetData theItem 'Committed) True)
											(objRemoveItem gPlayerShip theItem (itmGetCount theItem))
											)
										)
									;; notify next of kin...
									(dsf_SetScreenState 'plyKilled True)
									(dsf_DrawText "You have been killed in battle!" 0 30 'Large nil nil '(255 0 0) 'center)
									)
							;; all troops killed, commander shields and armor gone, some hp dmg
							(geq totEnmRngDmg (add (dsf_GetScreenState 'trpDefShd) (dsf_GetScreenState 'trpDefArm) (dsf_GetScreenState 'trpDefHP)
								(dsf_getData 'plyDefShd) (dsf_GetData 'plyDefArm))
								)
								(block Nil
									(dsf_SetScreenState 'plyTroopCount 0)
									;; remove them from the playership
									(objEnumItems gPlayerShip "*+TroopUnit" theItem
										(if (eq (itmGetData theItem 'Committed) True)
											(objRemoveItem gPlayerShip theItem (itmGetCount theItem))
											)
										)
									(if (dsf_GetData 'shield)
										(objRemoveItem gPlayerShip (dsf_GetData 'shield) 1)
										)
									(if (dsf_GetData 'armor)
										(objRemoveItem gPlayerShip (dsf_GetData 'armor) 1)
										)
									(dsf_DrawText "All your troops are gone and you're badly wounded!" 0 30 'Large nil nil '(255 0 0) 'center)
									)
							;; all troops killed, commander shields gone, some armor damage
							(geq totEnmRngDmg (add (dsf_GetScreenState 'trpDefShd) (dsf_GetScreenState 'trpDefArm) (dsf_GetScreenState 'trpDefHP)
								(dsf_getData 'plyDefShd))
								)
								(block Nil
									(dsf_SetScreenState 'plyTroopCount 0)
									(if (dsf_GetData 'shield)
										(objRemoveItem gPlayerShip (dsf_GetData 'shield) 1)
										)
									;; remove them from the playership
									(objEnumItems gPlayerShip "*+TroopUnit" theItem
										(if (eq (itmGetData theItem 'Committed) True)
											(objRemoveItem gPlayerShip theItem (itmGetCount theItem))
											)
										)
									(dsf_DrawText "All your troops are gone and you're wounded!" 0 30 'Large nil nil '(255 0 0) 'center)
									)
							;; all troops killed, some commander shield damage
							(geq totEnmRngDmg (add (dsf_GetScreenState 'trpDefShd) (dsf_GetScreenState 'trpDefArm) (dsf_GetScreenState 'trpDefHP)))
								(block Nil
									(dsf_SetScreenState 'plyTroopCount 0)
									;; remove them from the playership
									(objEnumItems gPlayerShip "*+TroopUnit" theItem
										(if (eq (itmGetData theItem 'Committed) True)
											(objRemoveItem gPlayerShip theItem (itmGetCount theItem))
											)
										)
									(dsf_DrawText "All your troops are gone!" 0 30 'Large nil nil '(255 0 0) 'center)
									)
							;; shields and armor totally gone, some hp dmg
							(geq totEnmRngDmg (add (dsf_GetScreenState 'trpDefShd) (dsf_GetScreenState 'trpDefArm)))
								(block Nil
									(setq totEnmRngDmg (subtract totEnmRngDmg 
										(add (dsf_GetScreenState 'trpDefShd) (dsf_GetScreenState 'trpDefArm))))
									(dsf_SetScreenState 'trpDefHP (subtract (dsf_GetScreenState 'trpDefHP) totEnmRngDmg))
									(dsf_DrawText "Your troops took a thrashing!" 0 30 'Large nil nil '(255 0 0) 'center)
									)
							;; shields totally gone, some armor dmg
							(geq totEnmRngDmg (dsf_GetScreenState 'trpDefShd))
								(block Nil
									(setq totEnmRngDmg (subtract totEnmRngDmg (dsf_GetScreenState 'trpDefShd)))
									(dsf_SetScreenState 'trpDefArm (subtract (dsf_GetScreenState 'trpDefArm) totEnmRngDmg))
									(dsf_DrawText "Your troops took some damage." 0 30 'Large nil nil '(255 0 0) 'center)
									)
							;; some minor shield damage
							(leq totEnmRngDmg (dsf_GetScreenState 'trpDefShd))
								(block nil
									(dsf_SetScreenState 'trpDefShd (subtract (dsf_GetScreenState 'plyDefShd) totEnmRngDmg))
									(dsf_DrawText "You are unstoppable!" 0 30 'Large nil nil '(255 0 0) 'center)
									)
							) ;; end enemy attack calcs switch
						) ;; end canvasFunc
					'actions		(list
						(list
							'name       '("Continue" 'C)
							'runFunc    '(block (screen)
								(switch
									(leq (objGetData gSource 'enmTroopCount) 0)
										(setq screen 'BattleWin)
									(and (leq (dsf_GetScreenData 'plyTroopCount) 0) (dsf_GetScreenState 'plyKilled))
										(setq screen 'BattlePK)
									(leq (dsf_GetScreenData 'plyTroopCount) 0)
										(setq screen 'BattleLose)
									(setq screen 'TacticMain)
									)
								(bp_screenData screen)
								)
							)
						) ;; end actions
					)  ;; battle calc screen end
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					BATTLE OUTCOME SCREENS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
			;; Combat successful
			(eq screen 'BattleWin)
				(list
					'screenName     "Victory!!!"
					'paneDesc       "You have subdued all resistance!\n\nThe spoils of war are now yours for the taking!"
					'screenType     "Canvas"
					'hideBack       True
					'hideExit       True
					'canvasFunc		'(block nil
						)
					'initFunc		'(block (xp)
						;; calculate an appropriate xp reward
						;; if the player-commander entered combat earn a bonus
						(if (dsf_getData 'plyCommitted)
							(setq xp 10)
							(setq xp 5)
							)
						;; adjust for sysLevel
						(setq xp (multiply xp (sysgetLevel)))
						;; add it to the total
						(dsf_IncData 'plyBpXP xp)
						)
					'actions		(list
						(list
							'name     	  '("Continue" 'C)
							'nextScreen		"&dsLoot;"
							'runFunc    	'(block Nil
								;; mark that battle has been complete here
								;; perhaps this should be a helper to clean up and lingering data...
								(objSetData gSource 'bp_CombatDone True)
								;; reset the troop's status
								(objEnumItems gPlayerShip "*+troopItem" troop (objSetItemData gplayerShip troop "Committed" Nil (itmGetCount troop)))
								;; remember that we won
								(dsf_IncData 'plyBpVic 1)
								(setq gPrevScreen (dsf_ScreenTypeToUNID 'itemPickerStation))
								(setq gPrevPane "Default")
								)
							)
						)
					)
			;; Combat not successful
			(eq screen 'BattleLose)
				(list
					'screenName     "Failure!!!"
					'paneDesc       (cat "You have been denied entry to "(objGetName gSource 1)"!")
					'screenType     "Canvas"
					'hideBack       True
					'hideExit       True
					'canvasFunc		'(block nil
						)
					'initFunc		'(block (xp)
						;; calculate an appropriate xp reward
						;; if the player-commander entered combat earn a bonus
						(if (dsf_GetData 'plyCommitted)
							(setq xp 5)
							(setq xp 1)
							)
						;; adjust for sysLevel
						(setq xp (multiply xp (sysgetLevel)))
						;; add it to the total
						(dsf_IncData 'plyBpXP xp)
						)
					'actions		(list
						(list
							'name       '("Launch a new offensive" 'L)
							'runFunc    '(bp_ScreenData 'TroopSelect)
							)
						(list
							'name       '("Undock" 'U)
							'runFunc    '(block Nil
								;; reset the troop's status
								(objEnumItems gPlayerShip "*+TroopUnit" troop (objSetItemData gplayerShip troop "Committed" Nil (itmGetCount troop)))
								;; update our fail count
								(dsf_IncData 'plyBpFal 1)
								(scrExitdock gScreen)
								)
							)
						)
					)
			;; Player killed in combat
			(eq screen 'BattlePK)
				(list
					'screenName     "You were killed in combat!"
					'paneDesc       (cat "Your forces were gunned down and you along with them!")
					'screenType     "Canvas"
					'hideBack       True
					'hideExit       True
					'canvasFunc		'(block nil
						)
					'initFunc	'(block Nil
						)
					'actions	(list
						(list
							'name       '("Continue" 'C)
							'runFunc    '(block Nil
								(plyDestroyed gPlayer "was killed by in a boarding attempt")
								(scrExitdock gScreen)
								)
							)
						)
					)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					COMMANDER SCREENS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen is the entry point to the commander screens
;; It provides alot of handy info on the commander as well as links to other
;; important screens

			(eq screen "CommanderMain")
				(list
					'screenName     "Character Screen"
					'screenType     "Canvas"
					'noSave			True
					'hideBack       Nil
					'hideExit       True
					'canvasFunc	'(block Nil							
							(cnvDrawRect 0 0 600 400 '(8 8 8))
							(dsf_DrawText "Commander stats" nil nil 'HeaderBold 90 30 '(255 255 255))
							(dsf_DrawText (cat "Ranged Damage: "(dsf_GetData 'plyRngPwr)) 10 40)
							(dsf_DrawText (cat "Ranged Speed: "(dsf_GetData 'plyRngSpd)) nil 20)
							(dsf_DrawText (cat "Ranged Accuracy: "(dsf_GetData 'plyRngAcu)) nil 20)
							(dsf_DrawText (cat "Melee Damage: "(dsf_GetData 'plyMelPwr)) nil 30)
							(dsf_DrawText (cat "Melee Speed: "(dsf_GetData 'plyMelSpd)) nil 20)
							(dsf_DrawText (cat "Melee Accuracy: "(dsf_GetData 'plyMelAcu)) nil 20)
							(dsf_DrawText (cat "Shield Strength: "(dsf_GetData 'plyDefShd)) nil 30)
							(dsf_DrawText (cat "Armor Strength: "(dsf_GetData 'plyDefArm)) nil 20)
							(dsf_DrawText (cat "Health Points: "(dsf_GetData 'plyDefHP)) nil 20)

							(dsf_DrawText "Skills" nil nil 'HeaderBold 300 30 '(255 255 255))
							(dsf_DrawText (cat "Tactical knowledge: "(dsf_GetData 'plyBpTac)) 10 40)
							(dsf_DrawText (cat "Hacker: "(dsf_GetData 'plyHacker)) nil 20)
							(dsf_DrawText (cat "Stealth: "(dsf_GetData 'plyStealth)) nil 20)
							(dsf_DrawText (cat "Psionic: "(dsf_GetData 'plyPsionic)) nil 20)
							(dsf_DrawText (cat "Demolition: "(dsf_GetData 'plyDemolition)) nil 20)
							(dsf_DrawText (cat "Repair: "(dsf_GetData 'plyRepair)) nil 20)
							(dsf_DrawText (cat "Recon: "(dsf_GetData 'plyRecon)) nil 20)
							(dsf_DrawText (cat "Commander: "(dsf_GetData 'plyBpCmr)) nil 20)
							(dsf_DrawText (cat "Level: "(dsf_GetData 'plybpLvl)) nil 40)
							(dsf_DrawText (cat "Experience: "(dsf_GetData 'plybpXP)) nil 20)
							(dsf_DrawText (cat "Upgrade points: "(dsf_GetData 'plybpPts)) nil 20)
							)
					'actions	(list
						(list
							'name       '("Spend skill points" 'S)
							'hideFunc	'(leq (dsf_GetData 'plybpPts) 0)
							'runFunc    '(bp_ScreenData "CommanderUpgrade")
							)
						(list
							'name       '("View personal inventory" 'V)
							'runFunc    '(bp_ScreenData "CommanderEquip")
							)
						(list
							'name       '("Join the battle" 'J)
							'hideFunc	'(eq (dsf_GetData 'plyCommitted) True)
							'runFunc    '(block Nil
								(dsf_setData 'plyCommitted True)
								(bp_ScreenData "preBattleSummary")
								)
							)
						(list
							'name       '("Disengage from battle" 'D)
							'hideFunc	'(eq (dsf_GetData 'plyCommitted) Nil)
							'runFunc    '(block Nil
								(dsf_setData 'plyCommitted Nil)
								(bp_ScreenData "preBattleSummary")
								)
							)
						)
					)

			;; This screen is displayed when the player has achieved a new level
			(eq screen "CommanderUpgrade")
				(list
					'screenName     "Character upgrade screen"
					'paneDesc       (cat "Decide how you will evolve.\n\nFree points: "(dsf_GetData 'plyBpPts))
					'screenType     "CustomPicker"
					'noSave			True
					'hideBack       Nil
					'hideExit       True
					'initFunc	'(block Nil
						)
					'customPicker   (list
						;;;; Skill upgrade
						(list
							'title      (cat "Ranged attack Speed: "(dsf_GetData 'plyRngSpd))
							'subtitle   "A measure of how many shots you can fire in one round of combat."
							'paneDesc   '("\n\nIt costs 3 points to increase your shot speed by +1 shot." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(ls (dsf_GetData 'plyBpPts) 3)
									'runFunc    '(block Nil
										(dsf_IncData 'plyBpPts -3)
										(dsf_IncData 'plyRngSpd 1)
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Ranged attack accuracy: "(dsf_GetData 'plyRngAcu))
							'subtitle   "A measure of how often you hit what you intend to."
							'paneDesc   '("\n\n1 upgrade point will increase your accuracy by 5%." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (dsf_GetData 'plyBpPts) 0)
									'runFunc    '(block Nil
										(dsf_IncData 'plyBpPts -1)
										(dsf_IncData 'plyRngAcu 5)
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Melee attack power: "(dsf_GetData 'plyMelPwr))
							'subtitle   "A measure of how much damage you deal to your enemies with melee weapons."
							'paneDesc   '("\n\n1 upgrade point will increase melee damage potential by 1 point." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (dsf_GetData 'plyBpPts) 0)
									'runFunc    '(block Nil
										(dsf_IncData 'plyBpPts -1)
										(dsf_IncData 'plyMelPwr 1)
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Melee attack Speed: "(dsf_GetData 'plyMelSpd))
							'subtitle   "A measure of how many attacks you can make in one round of combat."
							'paneDesc   '("\n\nIt costs 3 points to increase your attack speed by +1 hit." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(ls (dsf_GetData 'plyBpPts) 3)
									'runFunc    '(block Nil
										(dsf_IncData 'plyBpPts -3)
										(dsf_IncData 'plyMelSpd 1)
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Melee attack accuracy: "(dsf_GetData 'plyMelAcu))
							'subtitle   "A measure of how often you hit what you swing at."
							'paneDesc   '("\n\n1 upgrade point will increase your accuracy by 5%." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (dsf_GetData 'plyBpPts) 0)
									'runFunc    '(block Nil
										(dsf_IncData 'plyBpPts -1)
										(dsf_IncData 'plyMelAcu 5)
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Vitality: "(dsf_GetData 'plyDefHP))
							'subtitle   "With special training you will be able to take more damage before succumbing to your injuries."
							'paneDesc   '("\n\n1 upgrade point will increase your hit points by 10." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (dsf_GetData 'plyBpPts) 0)
									'runFunc    '(block Nil
										(dsf_IncData 'plyBpPts -1)
										(dsf_IncData 'plyDefHP 10)
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Skill - Hacker: "(dsf_GetData 'plyHacker))
							'subtitle   "Learn how to compromise data encryption and take command of the virtual universe."
							'paneDesc   '("\n\n1 upgrade point will increase your hacker abilities by 1." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (dsf_GetData 'plyBpPts) 0)
									'runFunc    '(block Nil
										(dsf_IncData 'plyBpPts -1)
										(dsf_IncData 'plyHacker 1)
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Skill - Stealth: "(dsf_GetData 'plyStealth))
							'subtitle   "Learn the techniques to avoid detection by your enemies."
							'paneDesc   '("\n\n1 upgrade point will increase your stealth abilities by 1." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (dsf_GetData 'plyBpPts) 0)
									'runFunc    '(block Nil
										(dsf_IncData 'plyBpPts -1)
										(dsf_IncData 'plyStealth 1)
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Skill - Psionic: "(dsf_GetData 'plyPsionic))
							'subtitle   "Turn your enemies against eachother and learn to use your potential."
							'paneDesc   '("\n\nIt costs 2 upgrade points to increase your psionic abilities by 1." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(and (leq (dsf_GetData 'plyBpPts) 1) (ls (dsf_GetData 'plyBpLvl) 5))
									'runFunc    '(block Nil
										(dsf_IncData 'plyBpPts -2)
										(dsf_IncData 'plyPsionic 1)
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Skill - Demolition: "(dsf_GetData 'plyDemolition))
							'subtitle   "Become an explosives expert and show your enemies what the big bang is really about."
							'paneDesc   '("\n\n1 upgrade point will increase your demolition ability by 1." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(and (leq (dsf_GetData 'plyBpPts) 1) (ls (dsf_GetData 'plyBpLvl) 3))
									'runFunc    '(block Nil
										(dsf_IncData 'plyBpPts -1)
										(dsf_IncData 'plyDemolition 1)
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Skill - Repair: "(dsf_GetData 'plyRepair))
							'subtitle   "Save credits by repairing damaged and malfunctioning equipment by yourself."
							'paneDesc   '("\n\n1 upgrade point will increase your repair ability by 1." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (dsf_GetData 'plyBpPts) 1)
									'runFunc    '(block Nil
										(dsf_IncData 'plyBpPts -1)
										(dsf_IncData 'plyRepair 1)
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Skill - Recon: "(dsf_GetData 'plyRecon))
							'subtitle   "Save credits by repairing damaged and malfunctioning equipment by yourself."
							'paneDesc   '("\n\n1 upgrade point will increase your ability to gather enemy intelligence." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (dsf_GetData 'plyBpPts) 1)
									'runFunc    '(block Nil
										(dsf_IncData 'plyBpPts -1)
										(dsf_IncData 'plyRecon 1)
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						(list
							'title      (cat "Skill - Tactics: "(dsf_GetData 'plyBpTac))
							'subtitle   "Proper deployment techniques and enemy engagment stategies are key to becoming a great commander."
							'paneDesc   '("\n\nTactical superiority can be increased by 1 point at the cost of 3 upgrade points." '+)
							'actions    (list
								(list
									'name       '("Select" 'S)
									'hideFunc	(leq (dsf_GetData 'plyBpPts) 2)
									'runFunc    '(block Nil
										(dsf_IncData 'plyBpPts -3)
										(dsf_IncData 'plyBpTac 1)
										(bp_ScreenData "CommanderUpgrade")
										)
									)
								)
							)
						)
					)
			;; This screen provides the mechanics to equip/unequip personal combat items
			;; This screen will be available at the begining of combat and at any time through
			;; the external interface so we need a way to determine if we go to battle or not
			;; TODO: wow, so much.
			;; the personal equipment needs types (armor, weapon, device etc.) to eliminate possible
			;; duplicates.
			(eq screen "CommanderEquip")
				(list
					'screenName     "Your personal armory"
					'screenType     "customPicker"
					'itemFilter     "* +Commander;"
					'noSave			True
					'hideBack       Nil
					'hideExit       True
					'actions	(list
						(list
							'name       '("Equip this item" 'E)
							'hideFunc	'(eq (itmGetData (dsf_GetListEntryData 'item) "Equipped") True)
							'runFunc    '(block (itm)
								(setq itm (dsf_GetListEntryData 'item))
								(switch
									(itmHasAttribute itm 'RangedWeapon)
										(if (eq (dsf_GetData 'plyRngWeapon) Nil)
											(block Nil
												(objSetItemData gPlayerShip itm "Equipped" True 1)
												(dsf_IncData 'plyRngPwr (itmGetStaticData itm 'rngPwr))
												(dsf_IncData 'plyRngSpd (itmGetStaticData itm 'rngSpd))
												(dsf_IncData 'plyRngAcu (itmGetStaticData itm 'rngAcu))
												(dsf_SetData 'plyRngWeapon itm)
												(dsf_BuildPaneDesc (cat (itmGetName itm 1)" is now equipped as a ranged weapon."))
												)
											(block Nil
												(dsf_BuildPaneDesc (cat "You must unequip your "(itmGetName (dsf_GetData 'weapon) 1)" before equipping another ranged weapon."))
												)
											)
									(itmHasAttribute itm 'MeleeWeapon)
										(if (eq (dsf_GetData 'plyMelWeapon) Nil)
											(block Nil
												(objSetItemData gPlayerShip itm "Equipped" True 1)
												(dsf_IncData 'plyMelPwr (itmGetStaticData itm 'MelPwr))
												(dsf_IncData 'plyMelSpd (itmGetStaticData itm 'MelSpd))
												(dsf_IncData 'plyMelAcu (itmGetStaticData itm 'MelAcu))
												(dsf_SetData 'plyMelWeapon itm)
												(dsf_BuildPaneDesc (cat (itmGetName itm 1)" is now equipped as a melee weapon."))
												)
											(block Nil
												(dsf_BuildPaneDesc (cat "You must unequip your "(itmGetName (dsf_GetData 'weapon) 1)" before equipping another melee weapon."))
												)
											)
									(itmHasAttribute itm 'Shield)
										(if (eq (dsf_GetData 'plyShield) Nil)
											(block Nil
												(objSetItemData gPlayerShip itm "Equipped" True 1)
												(dsf_IncData 'plyDefShd (itmGetStaticData itm 'DefShd))
												(dsf_SetData 'plyShield itm)
												(dsf_BuildPaneDesc (cat (itmGetName itm 1)" is now equipped as a shield."))
												)
											(block Nil
												(dsf_BuildPaneDesc (cat "You must unequip your "(itmGetName (dsf_GetData 'weapon) 1)" before equipping another shielding device."))
												)
											)
									(itmHasAttribute itm 'Armor)
										(if (eq (dsf_GetData 'plyArmor) Nil)
											(block Nil
												(objSetItemData gPlayerShip itm "Equipped" True 1)
												(dsf_IncData 'plyDefArm (itmGetStaticData itm 'DefArm))
												(dsf_SetData 'plyArmor itm)
												(dsf_BuildPaneDesc (cat "You are now wearing the "(itmGetName itm 1)"."))
												)
											(block Nil
												(dsf_BuildPaneDesc (cat "You must take off the "(itmGetName (dsf_GetData 'weapon) 1)" before equipping other armor."))
												)
											)
									)
									(bp_ScreenData "CommanderEquip")
								)
							)
						(list
							'name       '("Unequip this item" 'U)
							'hideFunc	'(eq (itmGetData (dsf_GetListEntryData 'item) "Equipped") Nil)
							'runFunc    '(block Nil
								(setq itm (dsf_GetListEntryData 'item))
								(switch
									(itmHasAttribute itm 'RangedWeapon)
										(block Nil
											(objSetItemData gPlayerShip itm "Equipped" Nil 1)
											(dsf_IncData 'plyRngPwr (multiply -1 (itmGetStaticData itm 'rngPwr)))
											(dsf_IncData 'plyRngSpd (multiply -1 (itmGetStaticData itm 'rngSpd)))
											(dsf_IncData 'plyRngAcu (multiply -1 (itmGetStaticData itm 'rngAcu)))
											(dsf_BuildPaneDesc (cat (itmGetName itm 1)" is now unequipped."))
											(dsf_SetData 'plyRngWeapon Nil)
											)
									(itmHasAttribute itm 'MeleeWeapon)
										(block Nil
											(objSetItemData gPlayerShip itm "Equipped" Nil 1)
											(dsf_IncData 'plyMelPwr (multiply -1 (itmGetStaticData itm 'MelPwr)))
											(dsf_IncData 'plyMelSpd (multiply -1 (itmGetStaticData itm 'MelSpd)))
											(dsf_IncData 'plyMelAcu (multiply -1 (itmGetStaticData itm 'MelAcu)))
											(dsf_BuildPaneDesc (cat (itmGetName itm 1)" is now unequipped."))
											(dsf_SetData 'plyMelWeapon Nil)
											)
									(itmHasAttribute itm 'Shield)
										(block Nil
											(objSetItemData gPlayerShip itm "Equipped" Nil 1)
											(dsf_IncData 'plyDefShd (multiply -1 (itmGetStaticData itm 'defShd)))
											(dsf_BuildPaneDesc (cat (itmGetName itm 1)" is now unequipped."))
											(dsf_SetData 'plyShield Nil)
											)
									(itmHasAttribute itm 'Armor)
										(block Nil
											(objSetItemData gPlayerShip itm "Equipped" Nil 1)
											(dsf_IncData 'plyDefArm (multiply -1 (itmGetStaticData itm 'DefArm)))
											(dsf_BuildPaneDesc (cat (itmGetName itm 1)" is now unequipped."))
											(dsf_SetData 'plyArmor Nil)
											)
									)
								(bp_ScreenData "CommanderEquip")
								)
							)
						)
					'customPicker	(block (displayList)
						(setq displayList (list))
						(objEnumItems gPlayerShip "* +Commander;" itm (block Nil
							(lnkAppend displayList
								(list
									'title      (cat (itmGetName itm 8) (if (itmGetData itm "Equipped") " - Equipped" ""))
									'image		(itmGetImageDesc itm)
									'subtitle   (typGetDataField (itmGetunid itm) 'description)
									'item		itm
									)
								)
							))
							displayList
						)
					)
					
			)
		))) ;; end of boarding parties screens
</Globals>

<!---	Alarm effect	--->
;; I had to use 2 unids just to get this beeping sound effect to play in 
;; the initial screen!  It requries a visual effect so I zeroed it out...
;; the wav file was  borrowed from digdug's WE3 mod, THANKS digdug!
<Effect UNID="&ef_bpAlarm;" sound="&sn_bpAlarm;">
	<Starburst
			lifetime=		"0"
			spikeCount=		"0"
			spikeLength=	"0"
			primaryColor=	"0x00, 0x00, 0x00"
			secondaryColor=	"0x00, 0x00, 0x00"
			/>
</Effect>

<!---			Resources			--->
<Image UNID="&rs_bpIntro;"  bitmap="resources\boardingIntro.jpg"   backColor="0x00000000" loadOnUse="true"/>
<Image UNID="&rs_bpIntroLights;"  bitmap="resources\boardingIntro2.jpg"   bitMask="resources\boardingIntro2Mask.bmp" loadOnUse="true"/>
<Image UNID="&rs_bpIntroPieces;"  bitmap="resources\boardingIntroPieces.jpg"   bitMask="resources\boardingIntroPiecesMask.bmp" loadOnUse="true"/>
;; thanks digdug for all the pics you sent me
<Image UNID="&rs_bpTacticIcons;"  bitmap="resources\tacticIcon001.bmp"   backColor="0x00000000" />
;; I stole this sound effect from digdug's WE3 mod, thx! (hope you don't mind!)	
<Sound UNID="&sn_bpAlarm;"			filename="resources/alarm.wav"/>
</TranscendenceExtension>