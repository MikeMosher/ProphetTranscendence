<?xml version="1.0" ?>
<!DOCTYPE TranscendenceExtension
[
	<!ENTITY BP_Screens				"0xD5125500">
	<!ENTITY itBoardingAdvertiser	"0xD5125501">
]>

<TranscendenceExtension UNID="&BP_Screens;" version="1.0">

    <ItemType UNID="&itBoardingAdvertiser;"
        name=       "Boarding Parties Advertiser"
        frequency=  "notrandom"
        modifiers=  "ScreenHook; TerminalService; CannotOrder; NotForSale;"
        >
        <Image imageID="&rsItems1;" imageX="0" imageY="288" imageWidth="96" imageHeight="96"/>
        <StaticData>
            <HookTitle>"Boarding Parties Screen Browser"</HookTitle>
            <HookSubtitle>"This will be the entry point for the commander screens but for now we can browse them all."</HookSubtitle>
            <ScreenData>'(bp_ScreenData 'Debug)</ScreenData>
        </StaticData>
    </ItemType>
<Globals>
	(setq bp_ScreenData (lambda (screen) (block Nil
		(switch
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;						Debug screen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen is used for debugging and should have access to all other screens.
			(eq screen "Debug")
				(list
					'screenName     "We're debugging, so where do you want to go?"
					'paneDesc       "Welcome to the boarding parties back door!"
					'screenType     "CustomPicker"
					'hideBack       True
					'initFunc		'(bp_InitializePlayerData)
					'customPicker   (list
						;;;; Screen Browser
						(list
							'title      "Initial screen"
							'subtitle   "The intended initial screen"
							'paneDesc   '("\n\nWhen a combat is about to begin, this screen should be displayed." '+)
							'actions    (list
								(list
									'name       '("View the Initial Screen" 'I)
									'runFunc    '(bp_ScreenData "Warning")
								))
						)
						(list
							'title      "Tactics screen"
							'subtitle   "Choose your destiny!"
							'paneDesc   '("\n\nThe player must decide the best course of action." '+)
							'actions    (list
								(list
									'name       '("View the Tactics Screen" 'T)
									'runFunc    '(bp_ScreenData "TacticMain")
								))
						)
						(list
							'title      "Troop select screen"
							'subtitle   "Send in the bots!"
							'paneDesc   '("\n\nThe best way to make friends is to kill their enemies." '+)
							'actions    (list
								(list
									'name       '("View the troop Select screen" 'S)
									'runFunc    '(bp_ScreenData "TroopSelect")
								))
						)
						(list
							'title      "Battle screen"
							'subtitle   "In space, no one can hear them scream!"
							'paneDesc   '("\n\nWatch your bots in action." '+)
							'actions    (list
								(list
									'name       '("View the Battle screen" 'B)
									'runFunc    '(bp_ScreenData "BattleInit")
								))
						)
						(list
							'title      "Commander screen"
							'subtitle   "Finally, some personal screen time!"
							'paneDesc   '("\n\nTaking the fight to a personal level." '+)
							'actions    (list
								(list
									'name       '("View the Commander screen" 'B)
									'runFunc    '(bp_ScreenData "CommanderMain")
								))
						)
						)
					)
					
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;						Initial screen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen is the entrance to the battle, warning the player that there is combat 
			(eq screen "Warning")
				(list
					'screenName     "WANRING WARNING WARNING"
					'paneDesc       "Sensors indicate hostiles are still active!"
					'screenType     "Canvas"
					'hideBack       True
					'hideExit       Nil
					
					;; draw some pretty pics :)
					'canvasFunc	'(block Nil
						(cnvDrawrect 0 0 600 400 '(8 8 8))
						(cnvDrawRect 100 100 400 200 '(255 0 0))
						(cnvDrawText 300 200 "Warning, Enemies detected!" 'subTitle '(255 255 255) 'center)
						)
						
					;; set up all our data for the enemy
					;; mark that combat is init-ed 
					'initFunc	'(block Nil
						;; We have found enemy resistance so load up some data
						;; find the player's C3I skill and perhaps some new ship
						;; device to scan the target station/wreck for more accurate info
						;; TODO: create these functions and decide what we need to do here
						;; (bp_InitializeBattle)
						(bp_InitializeEnemy)
						)
					'actions	(list
						(list
							'name       '("Begin preparations" 'B)
							'runFunc    '(bp_ScreenData "TacticMain")
						)
						(list
							'name       '("Perform intensive scan" 'P)
							'runFunc    '(bp_ScreenData "Scan")			;; TODO: this screen does not yet exist!
							'hideFunc	'(not (objGetItems gPlayerShip "*I+BattleScan"))
						)
						(list
							'name       '("Get suited up" 'G)
							'runFunc    '(bp_ScreenData "CommanderEquip")	;; TODO: remember that there's a battle happening
						)
						)
					)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;					
;;						TACTIC SCREENS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen will display the tactics available to the player
			(eq screen "TacticMain")
				(list
					'screenName     "Choose your battle tactic wisely!"
					'paneDesc       "The available options are dependent on the commander's tactic skill."
					'screenType     "CustomPicker"
					'hideBack       Nil
					'hideExit       Nil
					'customPicker   (list
						;;;; Tactic Browser
						;; TODO: decide whether we have one massive list and filter it or
						;; many sub menus organized by category
						(list
							'title      "Offensive tactics, basic"
							'subtitle   "Send in the troops."
							'paneDesc   '("\n\nThe most basic strategy ever: shoot." '+)
							'actions	(list
								(list
									'name       '("Attack" 'A)
									'runFunc    '(block Nil
									;; set the data that we need
									;; then move onto selecting appropriate troops
									(bp_ScreenData "TroopMain")
										)
									)
								)
							)
						(list
							'title      "Defensive tactics, basic"
							'subtitle   "Pull the troops out."
							'paneDesc   '("\n\nThe second most basic strategy ever: run away." '+)
							'actions	(list
								(list
									'name       '("Retreat" 'R)
									'runFunc    '(block Nil
										;; set the data that we need
										;; then move onto selecting appropriate troops
										(bp_ScreenData "TroopMain")
										)
									)
								)
							)
						(list
							'title      "Psionic Attack"
							'subtitle   "Use those egg heads to their full potential."
							'paneDesc   '("\n\nWhy kill your enemies when you can enslave them?" '+)
							'hideList   '(and (geq (dsf_GetData "Tactics") 4)
								(geq (dsf_GetData "Psionics") 1))
							'actions	(list
								(list
									'name       '("Mind Blast" 'M)
									'runFunc    '(block Nil
										;; set the data that we need
										;; then move onto selecting appropriate troops
										(bp_ScreenData "TroopMain")
									)
								)
								(list
									'name       '("Convert" 'C)
									'runFunc    '(block Nil
										;; set the data that we need
										;; then move onto selecting appropriate troops
										(bp_ScreenData "TroopMain")
										)
									'hideList   '(geq (dsf_GetData "Psionics") 5)
									)
								)
							)
							
						) ;; custom picker end
					) ;; tacticMain end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;						TROOP SCREENS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen allows the player to choose the troops that will be sent into combat
			(eq screen "TroopSelect")
				(list
					'screenName     "Troop select"
					'paneDesc       "Select which troop units you will commit to battle."
					'screenType     "CustomPicker"
					'itemFilter     "* +TroopUnit;"
					'noSave         True
					'hideBack       Nil
					'hideExit       True
					'actions            (list
						(list
							'name       '("Select" 'S)
							'hideFunc	'(itmGetData (dsf_GetListEntryData 'troop) "Committed")
							'runFunc    '(block Nil
								(if (gr (itmGetCount (dsf_GetListEntryData 'troop)) 1)
									(block Nil
										(dsf_SetScreenState 'troop (dsf_GetListEntryData 'troop))
										(bp_ScreenData 'TroopCount)
										)
									(block Nil
										(objSetItemData gPlayerShip (dsf_GetListEntryData 'troop) "Committed" True 1)
										(dsf_SetScreenState 'troop (dsf_GetListEntryData 'troop))
										(scrSetDesc gScreen (cat (itmGetName (dsf_GetListEntryData 'troop) 8)" committed to battle."))
										)
									)
								)
							)
						(list
							'name       '("De-Select" 'D)
							'hideFunc	'(eq (itmGetData (dsf_GetListEntryData 'troop) "Committed") Nil)
							'runFunc    '(block Nil
								(objSetItemData gPlayerShip (dsf_GetListEntryData 'troop) "Committed" Nil (itmGetCount (dsf_GetListEntryData 'troop)))
								(dsf_BuildPaneDesc ("\nTroops de-selected for combat."))
								)
							)
						)
					'customPicker	(block (tList)
						(setq displayList (list))
						(objEnumItems gPlayerShip "* +TroopUnit;" troop (block Nil
							(lnkAppend displayList
								(list
									'title      (cat (itmGetName troop 8) (if (itmGetData troop "Committed") " - Committed" ""))
									'image		(itmGetImageDesc troop)
									'subtitle   (cat (itmGetStaticData troop "Desc")
										" | Strength: "(itmGetStaticData troop "Strength")" | Defense: "(itmGetStaticData troop "Defense")" | Health: "(itmGetStaticData troop "Health")
										" | C3I: "(itmGetStaticData troop "C3I")" | Stealth: "(itmGetStaticData troop "Stealth")" | Psionics: "(itmGetStaticData troop "Psionics")
										" | Hacker: "(itmGetStaticData troop "Hacker")" | Healer: "(itmGetStaticData troop "Healer")" | Demolitions: "(itmGetStaticData troop "Demolitions")
										" | Commando: "(itmGetStaticData troop "Commando")" | Commander: "(itmGetStaticData troop "Commander")
										)
									'troop		troop
									)
								)
							))
							displayList
						)
					)
			;; Select the number of troops to be sent in
			(eq screen "TroopCount")
				(list
					'screenName     "Troop select, count"
					'paneDesc       "Your commander skill limits the number of troops that you can command at one time."
					'paneType       "Counter"
					'hideBack       Nil
					'hideExit       True
					'initFunc	'(block (maxCount commanderMaxCount)
						(setq maxCount (itmGetCount (dsf_GetScreenState 'troop)))
						(setq commanderMaxCount (dsf_GetData 'commander))
						(scrSetCounter gScreen (min maxCount commanderMaxCount))
						(dsf_BuildPaneDesc (list (cat "\nCommander Max: "commanderMaxCount) '+))
						)
					'actions	(list
						(list
							'name       '("Set" 'S)
							'runFunc    '(block (troop cnt maxCount commanderMaxCount)
								(setq troop (dsf_GetScreenState 'troop))
								(setq maxCount (itmGetCount troop))
								(setq commanderMaxCount (dsf_GetData 'commander))
								(setq cnt (scrGetCounter gScreen))
								(switch
									(ls cnt 0)
										(block Nil
											(dsf_BuildPaneDesc "\nInvalid amount.")
											(bp_ScreenData 'TroopCount)
											)
									
									(gr cnt maxCount)
										(block Nil
											(dsf_BuildPaneDesc "\nYou do not have enough troops.")
											(bp_ScreenData 'TroopCount)
											)
									
									(gr cnt commanderMaxCount)
										(block Nil
											(dsf_BuildPaneDesc "\nYou cannot command that many troops.")
											(bp_ScreenData 'TroopCount)
											)
											
									(block nil
										(objSetItemData gPlayerShip troop "Committed" True cnt)
										(bp_ScreenData 'TroopSelect)
										)
									)
								)
							)
						)
					)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					BATTLE SCREENS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen will display the stats and initiates the combat
			(eq screen "BattleInit")
				(list
					'screenName     (cat (objGetName gSource) "'s cargobay.")
					'hideBack       Nil
					'hideExit       Nil
					'initFunc	'(block Nil
						)
					'actions	(list
						(list
							)
						)
					)
			;; This screen will display the battle with as much detail as possible
			;; possibly even run automatically with optional interrupts to change
			;; tactics or use special abilities
			(eq screen "BattleMain")
				(list
					'screenName     (cat (objGetName gSource) "'s cargobay.")
					'hideBack       Nil
					'hideExit       Nil
					'initFunc	'(block Nil
						)
					'actions	(list
						(list
							)
						)
					)
			;; Combat successful
			(eq screen "BattleWin")
				(list
					'screenName     (cat (objGetName gSource) "'s cargobay.")
					'hideBack       Nil
					'hideExit       Nil
					'initFunc	'(block Nil
						)
					'actions	(list
						(list
							)
						)
					)
			;; Combat not successful
			(eq screen "BattleLose")
				(list
					'screenName     (cat (objGetName gSource) "'s cargobay.")
					'hideBack       Nil
					'hideExit       Nil
					'initFunc	'(block Nil
						)
					'actions	(list
						(list
							)
						)
					)
			;; Player killed in combat
			(eq screen "BattlePK")
				(list
					'screenName     (cat (objGetName gSource) "'s cargobay.")
					'hideBack       Nil
					'hideExit       Nil
					'initFunc	'(block Nil
						)
					'actions	(list
						(list
							)
						)
					)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;					COMMANDER SCREENS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This screen is the entry point to the commander screens
;; It provides alot of handy info on the commander as well as links to other
;; important screens

			(eq screen "CommanderMain")
				(list
					'screenName     "Character Screen"
					'screenType     "Canvas"
					'hideBack       Nil
					'hideExit       Nil
					'canvasFunc	'(block Nil
						(dsf_SetScreenData 'canvasFunc (block (str def hp tac lvl xp xpnext c3i stl psi hack heal dem como comr win lose)
							(setq str (dsf_GetData 'Strength))
							(setq def (dsf_GetData 'Defense))
							(setq hp (dsf_GetData 'HP))
							(setq tac (dsf_GetData 'Tactics))
							(setq lvl (dsf_GetData 'bpCommLevel))
							(setq xp (dsf_GetData 'bpCommXP))
							(setq xpnext (bp_ComputeXPNeeded))
							(setq points (dsf_GetData 'bpCommPoints))
							(setq c3i (dsf_GetData 'C3I))
							(setq stl (dsf_GetData 'Stealth))
							(setq psi (dsf_GetData 'Psionic))
							(setq hack (dsf_GetData 'Hacker))
							(setq heal (dsf_GetData 'Healer))
							(setq dem (dsf_GetData 'Demolition))
							(setq como (dsf_GetData 'Commando))
							(setq comr (dsf_GetData 'Commander))
							(setq win (dsf_GetData 'bpVictories))
							(setq lose (dsf_GetData 'bpFailures))
							
							(cnvDrawRect 0 0 600 400 '(8 8 8))
							
							(dsf_DrawText "Commander stats" nil nil 'HeaderBold 90 30 '(255 255 255) 'Left)
							(dsf_DrawText (cat "Strength: "str) 	nil 60 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Defense: "def) 		nil 30 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "HP: "hp) 			nil 30 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Tactics: "tac) 		nil 30 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Level: "lvl) 		nil 30 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "XP: "xp) 			nil 30 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Xp needed: "xpnext)	nil 30 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Free points: "points) nil 30 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Victories: "win)	nil 30 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Losses: "lose)	 	nil 30 'Medium nil nil '(255 255 255) 'Left)
							
							(dsf_DrawText "Skills" 					nil nil 'HeaderBold 300 30 '(255 255 255) 'Left)
							(dsf_DrawText (cat "C3I: "c3i) 			nil 60 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Stealth: "stl)		nil 30 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Psionics: "psi) 	nil 30 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Hacker: "hack)		nil 30 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Healer: "heal) 		nil 30 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Demolition: "dem) 	nil 30 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Commando: "como) 	nil 30 'Medium nil nil '(255 255 255) 'Left)
							(dsf_DrawText (cat "Commander: "comr) 	nil 30 'Medium nil nil '(255 255 255) 'Left)
							))
						)
					'actions	(list
						(list
							'name       '("Spend skill points" 'S)
							'runFunc    '(bp_ScreenData "CommanderUpgrade")
							'hideFunc	'(if (gr (dsf_GetData 'bpCommPoints) 0) True Nil)
							)
						(list
							'name       '("View personal inventory" 'V)
							'runFunc    '(bp_ScreenData "CommanderEquip")
							)
						)
					)
					
			;; This screen is displayed when the player has achieved a new level
			(eq screen "CommanderUpgrade")
				(list
					'screenName     "Character upgrade screen"
					'screenType     "CustomPicker"
					'hideBack       Nil
					'hideExit       True
					'initFunc	'(block Nil
						)
					'customPicker   (list
						;;;; Skill upgrade
						(list
							)
						)
					)
			;; This screen provides the mechanics to equip/unequip personal combat items
			;; This screen will be available at the begining of combat and at any time through
			;; the external interface so we need a way to determine if we go to battle or not
			;; TODO: wow, so much.
			;; bp_EquipItem is not yet defined.  It should check the static data stats of the passed
			;; in item and increment the player's stats appropriately
			;; 
			;; the personal equipment needs types (armor, weapon, device etc.) to eliminate possible
			;; duplicates.
			(eq screen "CommanderEquip")
				(list
					'screenName     "Your personal armory"
					'screenType     "ItemPickerPlayer"
					'itemFilter     "* +CommanderItem;"
					'hideBack       Nil
					'hideExit       True
					'actions	(list
						(list
							'name       '("Equip this item" 'E)
							'runFunc    '(block Nil
								(itmSetGlobalData (scrGetItem gScreen) "Equipped" True)
								(bp_EquipItem (scrGetItem gScreen))
								(bp_ScreenData "CommanderEquip")
								)
							'hideFunc	'(not (itmGetGlobalData (scrGetItem gScreen) "Equipped"))
							)
						(list
							'name       '("Unequip this item" 'U)
							'runFunc    '(block Nil
								(itmSetGlobalData (scrGetItem gScreen) "Equipped" Nil)
								(bp_UnequipItem (scrGetItem gScreen))
								(bp_ScreenData "CommanderEquip")
								)
							'hideFunc	'(itmGetGlobalData (scrGetItem gScreen) "Equipped")
							)
						)
					)
					
			)
		)))
</Globals>

</TranscendenceExtension>