<?xml version="1.0" ?>
<!DOCTYPE TranscendenceExtension
[
	<!ENTITY BP_Logic					"0xD5125502">
	<!ENTITY bp_FactionCalculator		"0xD5125506">
]>

<TranscendenceExtension UNID="&BP_Logic;" version="1.0">

<Globals>
(block Nil
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;		Debug functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; We'll start with some debug helpers, I have a feeling we'll need them
	;; borrowed from alterecco's DSF mod ;P

	;; This variable controls if we are running in debug or not.
	(setq bp_Debug True)
	;; this is a convenient way to force all debug calls from
	;; log to screen
	(setq bp_DebugToScreen True)
	;; DoDebug will print debug information if dsf_Debug
	;; is set. It takes a string which will be output, and
	;; if screen is True, it will be sent to the screen.
	;; Otherwise it will go into the log
	(setq bp_DoDebug (lambda (string screen)
		(if bp_Debug
			(if (or screen bp_DebugToScreen)
				(dbgOutput string)
				(dbgLog string)
			)
		)
	))
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;		Player Data
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;;;	Player data is kept on the playership because it will change as
	;;; the game progresses.  I have borrowed the dsf helper funcs to 
	;;; minimize redundancy.

	;; This function sets everything up and should only be run once
	(setq bp_InitializePlayerData (lambda Nil
		(block Nil
			;; common combat stats
			(dsf_SetData 'plyRngPwr		0)
			(dsf_SetData 'plyRngSpd		1)
			(dsf_SetData 'plyRngAcu		50)
			(dsf_SetData 'plyMelPwr		10)
			(dsf_SetData 'plyMelSpd		1)
			(dsf_SetData 'plyMelAcu		70)
			(dsf_SetData 'plyDefShd		0)
			(dsf_SetData 'plyDefArm		0)
			(dsf_SetData 'plyDefHP		50)

			;; skills
			(dsf_SetData 'plyHacker		10)
			(dsf_SetData 'plyStealth	10)
			(dsf_SetData 'plyPsionic	10)
			(dsf_SetData 'plyDemolition 10)
			(dsf_SetData 'plyRepair		10)
			(dsf_SetData 'plyRecon		10)

			;; player specific 
			(dsf_SetData 'plyBpTac 		1)
			(dsf_SetData 'plyBpCmr		10)
			(dsf_SetData 'plyBpXP	 	0)
			(dsf_SetData 'plyBpLVL 		1)
			(dsf_SetData 'plyBpPts 		5)
			(dsf_SetData 'plybpVic		0)
			(dsf_SetData 'plyBpFal		0)

			;; by default, player does not enter battle
			(dsf_SetData 'plyCommitted Nil)
		)
	))
	
	;; If the player has enough xp to gain a level
	;; return the new level, else returns nil
	(setq bp_ComputeCommanderLevel (lambda Nil
		(block (xp oldLvl newLvl)
			(setq xp (dsf_GetData 'plyBpXP))
			(setq oldLvl (dsf_GetData 'plyBpLVL))
			(switch
				(leq xp 100)
					(setq newLvl 2)
				(leq xp 250)
					(setq newLvl 3)
				(leq xp 500)
					(setq newLvl 4)
				(leq xp 1000)
					(setq newLvl 5)
				(leq xp 2500)
					(setq newLvl 6)
				(leq xp 5000)
					(setq newLvl 7)
				(leq xp 10000)
					(setq newLvl 8)
				(leq xp 25000)
					(setq newLvl 9)
				(setq newLvl 10)
			)
			(if (gr newLvl oldLvl)
				newLvl
				Nil
			)
		)
	))
	
	;; compute how much xp is needed to achieve the next level and return it
	;; if max level returns 0
	(setq bp_ComputeXPNeeded (lambda Nil
		(block (xp lvl xpNeed)
			(setq xpNeed 0)
			(setq xp (dsf_GetData 'plyBpXP))
			(setq lvl (dsf_GetData 'plyBpLVL))
			(switch
				(eq lvl 1)
					(setq xpNeed (subtract 100 xp))
				(eq lvl 2)
					(setq xpNeed (subtract 250 xp))
				(eq lvl 3)
					(setq xpNeed (subtract 500 xp))
				(eq lvl 4)
					(setq xpNeed (subtract 1000 xp))
				(eq lvl 5)
					(setq xpNeed (subtract 2500 xp))
				(eq lvl 6)
					(setq xpNeed (subtract 5000 xp))
				(eq lvl 7)
					(setq xpNeed (subtract 10000 xp))
				(eq lvl 8)
					(setq xpNeed (subtract 25000 xp))
				0
			)
			xpNeed
		)
	))
			
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;		Manipulating Enemy Data
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Enemy data is kept in static data because it remains the same 
;;; throughout the game and is modified dynamically to suit our needs

	;; this is our helper func to pull stats out of static data
	;; the 'sov' arg must be filtered with bp_sovHack to work properly
	(setq bp_GetEnemyData (lambda (sov stat)
		(block (sovlist data Found)
			(setq sovlist (itmGetStaticData (itmCreate &bp_FactionCalculator; 0) sov))
			(setq Found Nil)
			(enumwhile sovlist (not Found) thisEntry (block Nil
				(if (eq (item thisEntry 0) stat)
					(block nil
						(setq data (item thisEntry 1))
						(setq Found True)
					)
				)
			))
		data
		)
	))
	
	;; Set up an enemy force to fight with
	;; This is run after we've determined that we will have a fight
	(setq bp_InitializeEnemy (lambda Nil
		;; check if we've already run
		(if (not (objGetData gSource "bp_initEnemyDone"))
			(block (sov lvl imageData ship enmTroopCount)
				;; we must hack the sov to get a nice string we can work with
				(setq sov (sovHack (objGetSovereign gSource)))
				(setq lvl (sysGetLevel))
				;; we use the image of the station to determine a rough
				;; estimate how much resistance is present based on the image size
				;; we use rollDice to generate a nice curve for troops generated rather than a pure random num
				(setq imageData (max (item (objGetImageDesc gSource) 3) (item (objGetImageDesc gSource) 4)))
				;; check if this used to be a ship (in which case, less troops)
				(setq ship (if (strFind 'wreck (objGetname gSource)) True Nil))
				(switch
					;; we found a tiny/small ship, only 1 troop
					(and (leq imageData 64) ship)
						(setq enmTroopCount 1)
					;; we found a tiny station, 3-7 troops
					(leq imageData 64)
						(setq enmTroopCount (rollDice 2 3 1))

					;; we found a med ship, 3-7 troops
					(and (leq imageData 96) ship)
						(setq enmTroopCount (rollDice 2 3 1))
					;; we found a small station, 6-18 troops
					(leq imageData 96)
						(setq enmTroopCount (rollDice 3 5 3))
						
					;; we found a small cap ship, 15-40 troops
					(and (leq imageData 128) ship)
						(setq enmTroopCount (rollDice 5 6 10))
					;; we found a med station, 26-80 troops
					(leq imageData 128)
						(setq enmTroopCount (rollDice 6 10 20))

					;; we found a cap ship, 34-90 troops
					(and (leq imageData 192) ship)
						(setq enmTroopCount (rollDice 4 15 30))
					;; we found a med/lrg station, 55-175 troops
					(leq imageData 192)
						(setq enmTroopCount (rollDice 5 25 50))

					;; we found a massive cap ship, 66-240 troops
					(and (gr imageData 192) ship)
						(setq enmTroopCount (rollDice 6 30 60))
					;; we found a massive station, 77-420 troops
					(gr imageData 192)
						(setq enmTroopCount (rollDice 7 50 70))
					)
					
				;; still getting too many troops on a station so we set a max
				;; limit of sysLevel X 10 for now until I can balance it properly
				(setq enmTroopCount (min enmTroopcount (multiply lvl 10)))
				;; now we save the troop count on our station
				(objSetData gSource 'enmTroopCount enmTroopCount)

				;; now we generate the enemy force
				(objSetData gSource 'enmName (bp_GetEnemyData sov 'name))
				(objSetData gSource 'enmRngPwr (bp_GetEnemyData sov 'rngPwr))
				(objSetData gSource 'enmRngSpd (bp_GetEnemyData sov 'rngSpd))
				(objSetData gSource 'enmRngAcu (bp_GetEnemyData sov 'rngAcu))
				(objSetData gSource 'enmMelPwr (bp_GetEnemyData sov 'MelPwr))
				(objSetData gSource 'enmMelSpd (bp_GetEnemyData sov 'MelSpd))
				(objSetData gSource 'enmMelAcu (bp_GetEnemyData sov 'MelAcu))
				(objSetData gSource 'enmDefShd (bp_GetEnemyData sov 'DefShd))
				(objSetData gSource 'enmDefArm (bp_GetEnemyData sov 'DefArm))
				(objSetData gSource 'enmDefHP (bp_GetEnemyData sov 'DefHP))
				(objSetData gSource 'enmHacker (bp_GetEnemyData sov 'Hacker))
				(objSetData gSource 'enmStealth (bp_GetEnemyData sov 'Stealth))
				(objSetData gSource 'enmPsionic (bp_GetEnemyData sov 'Psionic))
				(objSetData gSource 'enmDemolition (bp_GetEnemyData sov 'Demolitino))
				(objSetData gSource 'enmRepair (bp_GetEnemyData sov 'Repair))
				(objSetData gSource 'enmRecon (bp_GetEnemyData sov 'Recon))
				
				;; finally, determine some random event modifers
				;; for now we set these as placeholders...
				(dsf_SetScreenState 'evnRngPwr 100)
				(dsf_SetScreenState 'evnRngSpd 100)
				(dsf_SetScreenState 'evnRngAcu 100)
				(dsf_SetScreenState 'evnMelPwr 100)
				(dsf_SetScreenState 'evnMelSpd 100)
				(dsf_SetScreenState 'evnMelAcu 100)
				(dsf_SetScreenState 'evnDefShd 100)
				(dsf_SetScreenState 'evnDefArm 100)
				(dsf_SetScreenState 'evnDefHP 100)

				;; mark that we've been run
				(objSetData gSource "bp_initEnemyDone" True)
				)
			)
	))
			
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;		Core mechanics and logic
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
	;; this function determines whether or not we should have a fight
	;; and enters the boarding DS framework
	;; it should be run from the event handler when the player docks
	(setq bp_InitializeBattle (lambda Nil
		(block (sov excl)
			;; check if the original sov of the station is hostile
			(setq sov (if (eq (sovGetDisposition (objGetSovereign gSource) &svPlayer;) 'Enemy)
				True
				;; the sov isn't originally hostile, but will fight if the player is responsible
				;(if (eq gPlayerShip aDestroyer) 
				;	True
				;	Nil
				;	)
				))
			;; TODO: include some sort of exclusion list, perhaps of specific UNIDS that should
			;; never have combat on them.  
			(setq excl (list))
			(if (find excl (staGetType gSource)) Nil True)

			;; Final check of all our criteria
			(if (and sov 
					(or (not (objGetData gSource 'bp_Dead)) (isError (objGetData gSource 'bp_Dead)))
					(or (not (objGetData gSource 'bp_CombatDone) (isError (objGetData gSource 'bp_CombatDone))))
					(not (objCanAttack gSource))
					(eq (find excl (staGetType gSource)) Nil)
					(geq (objGetDestiny gSource) (multiply (sysGetLevel) 18))
					)
				;; we have a fight, redirect to our warning screen
				(dsf_ShowDockScreen (bp_ScreenData 'Warning))
				)
			)
		))
		
	;; this function turns sov data into something I can use as a static data element
	;; we have stats for all major sovs and a 'catch-all' for modded sovs or minor
	;; factions that I don't feel like creating custom stats for :P
	(setq sovHack (lambda (sov)
		(switch
			(eq sov 4097)
				'Independent
			(eq sov 4098)
				'Commonwealth
			(eq sov 4099)
				'IndMerch
			(eq sov 4100)
				'IndMerch
			(eq sov 4101)
				'Charon
			(eq sov 4102)
				'Outlaws
			(eq sov 4103) ;; the main ares sov
				'Ares1
			(eq sov 4104)
				'anarachists
			(eq sov 4105)
				'settlers
			(eq sov 4106)
				'cult
			(eq sov 4107)
				'rogue
			(eq sov 4108)
				'sung
			(eq sov 4109)
				'slaves
			(eq sov 4110)
				'desChaos
			(or (eq sov 4111) (eq sov 4115))
				'auton
			(eq sov 4112)
				'desOrder
			(eq sov 4113)
				'corporate
			(eq sov 4114)
				'BM
			(or (eq sov 4116) (eq sov 4118))
				'ferian
			(eq sov 4117)
				'ringers
			(or (eq sov 1314817) (eq sov -591790014) (eq sov -591790013) (eq sov -591790012))
				;; the last 3 are from DSF's head-to-head spawn which is a dependency so we include them too
				'gladiator
			(eq sov 1708033)
				'antarctica
			(eq sov 1708034)
				'CWFleet
			(eq sov 1839105)
				'iocrym
			(eq sov 1839106)  ;; ares in heretic are neutral to the player
				'Ares2
			(eq sov 1839107)
				'AI
			(eq sov 2101249) ;; this sov is never used in vanilla for some reason
				'domina
			(eq sov 134283333)
				'heliotropes
			(eq sov 134348880)
				'Centauri
			(eq sov 134348932)
				'kobol
			(eq sov 134349003)
				'luminous
			(eq sov 134349058)
				'huari
			(eq sov 134349120)
				'dwarg
			(eq sov 134349133)
				'zoanthropes
			(eq sov 134414409)
				'marauders
			(eq sov 134414594)
				'himal
			(eq sov 134414656)
				'urak
			(eq sov 134480195)
				'gaian
			'misc ;; this is our catch-all for modded sovs that aren't in the static data list
			)
		))
		
	;; this func is used to calculate ranged damage from all the committed troops
	;; it takes no arguments and returns the damage total (as an integer)
	(setq bp_RngDmgCalc (lambda Nil
		(block (totRngDmg cnt)
			(setq totRngDmg 0)
			(setq cnt 0)
			(enum (objGetItems gPlayerShip "*+TroopUnit") thisItem
				(if (itmGetData thisItem 'committed)
					(for i 1 (itmGetCount thisItem)
						(block (rand pwr spd acu)
							(setq rand (random 0 100))
							(setq cnt (add cnt 1))
							(setq pwr (divide (multiply (itmGetStaticData thisItem 'rngPwr) (dsf_GetScreenState 'tacRngPwr) (dsf_GetScreenState 'evnRngPwr)) 10000))
							(setq spd (divide (multiply (itmGetStaticData thisItem 'rngSpd) (dsf_GetScreenState 'tacRngSpd) (dsf_GetScreenState 'evnRngSpd)) 10000))
							(setq acu (divide (multiply (itmGetStaticData thisItem 'rngAcu) (dsf_GetScreenState 'tacRngAcu) (dsf_GetScreenState 'evnRngAcu)) 10000))
							(if (leq rand acu)
								(setq totRngDmg (add totRngDmg (divide (multiply pwr spd acu) 100)))
								)
							(dbgoutput (cat "Pwr: "pwr" | Spd: "spd" | Acu: "acu" | Troop#: "cnt" | Total Rng Dmg: "totRngDmg))
							)
						)
					)
				)
			(dbgoutput "Total dmg of troops: "totRngDmg)
			totRngDmg
			)
		))
		
	;; this func is used to calculate Melee damage from all the committed troops
	;; it takes no arguments and returns the damage total (as an integer)
	(setq bp_MelDmgCalc (lambda Nil
		(block (totMelDmg)
			(setq totMelDmg 0)
			(enum (objGetItems gPlayerShip "*+TroopUnit") thisItem
				(if (itmGetData thisItem 'committed)
					(for i 1 (itmGetCount thisItem)
						(setq totRngDmg (add totMelDmg (divide (multiply 
							(divide (multiply (itmGetStaticData thisItem 'MelPwr) (dsf_GetScreenState 'tacMelPwr) (dsf_GetScreenState 'evnMelPwr)) 10000)
							(divide (multiply (itmGetStaticData thisItem 'MelSpd) (dsf_GetScreenState 'tacMelSpd) (dsf_GetScreenState 'evnMelSpd)) 10000)
							(divide (multiply (itmGetStaticData thisItem 'MelAcu) (dsf_GetScreenState 'tacMelAcu) (dsf_GetScreenState 'evnMelAcu)) 10000)
							) 100)))
						)
					)
				)
			totMelDmg
			)
		))
	)
</Globals>
</TranscendenceExtension>